-- MySQL dump 10.13  Distrib 8.0.15, for Win64 (x86_64)
--
-- Host: localhost    Database: skill_data
-- ------------------------------------------------------
-- Server version	8.0.15

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
 SET NAMES utf8 ;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `modules`
--

DROP TABLE IF EXISTS `Modules`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `Modules` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Aims` text NOT NULL,
  `Assessment` text NOT NULL,
  `Content` text NOT NULL,
  `Credits` text NOT NULL,
  `Feedback` text NOT NULL,
  `Lecturers` text NOT NULL,
  `ModuleCode` varchar(255) NOT NULL,
  `ModuleName` varchar(255) NOT NULL,
  `Objectives` text NOT NULL,
  `Session` text NOT NULL,
  `Summary` text NOT NULL,
  `Teaching` text NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `modules`
--

LOCK TABLES `Modules` WRITE;
/*!40000 ALTER TABLE `Modules` DISABLE KEYS */;
INSERT INTO `Modules` (`Aims`,
  `Assessment`,
  `Content`,
  `Credits`,
  `Feedback`,
  `Lecturers`,
  `ModuleCode`,
  `ModuleName`,
  `Objectives`,
  `Session`,
  `Summary`,
  `Teaching`) VALUES ('The aims of this module are to develop in candidates: an understanding of the software development business, how it typically functions and how it is typically organised, and the legal and ethical environment in which it operates;an understanding of basic software engineering methodologies and software project management;an understanding of software engineering processes, including requirements capture, development, testing and maintenance, and the ability to carry out these processes as part of a team;an interest in continual professional development and professional body membership.','Assessment takes the form of MOLE quizzes, problem sheets and the extensive team project.The module has the explicit objective of developing group teamwork skills. Participation in teamwork is mandatory, and absence will result in loss of marks and eventually loss of credits.The group teamwork project cannot be repeated within the academic year. Failure will normally result in you repeating the year.','Semester 1:Introduction (What Software Engineering is, course structure)Software lifecycle (Processes, Agile)Project management (Projects, processes, people, products)Software configuration management (Version and change control)Requirements engineeringDesign PrinciplesMetrics and estimationLegal and ethics, CPD and professional body membershipBasic programing in RubySemester 2:Software architectures and the webEngineering a data-driven website (with the Sinatra framework for Ruby)Database design and implementation (with the SQLite database management system)Software testingSoftware maintenance','20','For the software project, feedback takes multiple forms: from the \"client\" for whom students will be building the system; through team supervision meetings (semester 2 only); through help given by demonstrators and lecturers at lab classes; comments given on marked assignments, and more general class feedback given in lectures.','Dr Kirill Bogdanov, Dr Phil McMinn and Mr Andrew Stratton','com1001','Introduction to Software Engineering','By the end of the unit, a candidate will be able to demonstrate:An understanding of the basic principles of software engineering, the software business, and the legal and ethical issues involved;The ability to gather and formalise requirements in terms of use cases and user stories for a website software system;The ability to develop a basic data-driven website software system, according to a set of requirements in a team and through the iterations of an agile methodology, using appropriate (open source and non-open source) tools.The ability to test the software system (i.e., develop and execute test scripts, employ test automation, assess test results);The ability to perform basic maintenance tasks on the software system, e.g. make bug fixes, apply basic refactorings etc.','Academic Year 2018/19','This module introduces the Software Engineering concepts that are needed to develop software systems that can meet basic functional requirements within a given problem domain. It covers the main steps in the process of developing such systems, from requirements analysis through to their implementation and testing.A major part of the module involves students working in teams to develop a web-based software system, which gives practical experience in teamwork and managing software projects and their products.','The course consists of lectures, lab sessions and team work on the group project. Lectures will cover key knowledge and more theoretical aspects of software engineering, while labs will cover practical aspects, such as version control, developing for the web, and databases.'),('The aims of this module are to: introduce the fundamental mathematical concepts needed in the computer science degree.enhance the students\' confidence in mathematics.stimulate the students\' interest in mathematics for computing.','In semester 1, 30% from four example sheets (7.5% each), plus 70% from two invigilated MOLE quizzes (35% each). In semester 2, 100% by examination.','Semester 1 Introduction: The role of mathematics in modelling computing systemsPropositional logic: Syntax and semantics, truth tables, translation of natural language sentencesSets: Basic definitions and operations on sets, Russell\'s paradoxBoolean algebras and circuits: Axioms and proofs, relationship with sets and propositional logics, modelling hardware systemsPredicate logic: Syntax and semantics, predicates and quantifiers, translation of natural language sentencesProof strategies: How to use natural deduction to prove mathematical theoremsFunctions and Relations: Basic definition, operations on functions and relations, cardinality, Cantor\'s diagonal argumentInduction and Recursion: induction principles, definition and examples of recursive functions, proofs by inductionSemester 2 The Integers: Factors and Primes, Division, Euclid\'s Algorithm, Linear Diophantine EquationsModular Arithmetic: Integers Modulo n, Solving Equations, Chinese Remainder Theorem, Fermat\'s Little Theorem, RSA CryptographyMatrices and Systems of Linear Equations: Elementary Row Operations, General Solutions, Reduced Echelon Form, Vectors and Linear TransformationsMatrix Algebra: Matrix Multiplication, Inverses, Determinants Eigenvalues and Eigenvectors, DiagonalisationProbability: Counting Elements of Sets, Permutations and combinations, Probability Space, Conditional ProbabilityVariables and Processes: Random Variables, Difference Equations, Markov Processes, PageRank','20','Feedback on tutorial exercises, assignments and during lectures.','Dr Paul Watton, Dr Mike Stannet and Dr Mark Stevenson','com1002','Foundations of computer Science','By the end of this course the students should be able to: apply different mathematical concepts and techniques in analysing and understanding important areas of computing;appreciate how mathematical techniques contribute to the study of computing;construct suitable models of computing systems and structures, and validate and analyse them.develop logical arguments and understand their relevance in contexts involving computing;develop an investigation in a computing topic by applying mathematical techniques and knowledge to a problem or situation;be able to answer examination questions to a suitable standard in a timed examination.','Academic Year 2018/19','The course consists of (around) 10 blocks of 2-3 weeks work each. Each block develops mathematical concepts and techniques that are of foundational importance to computing. Lectures and problem classes will be used. The intention is to enthuse about these topics, to demonstrate why they are important to us, to lay the foundations of their knowledge and prepare students for future computing courses. It is not expected that the course will cover ALL of the maths that is needed later, either in terms of depth or scope.','Lectures and problems classes.'),('to develop an understanding of computers and computer program execution;to develop an understanding of program elements such as variables, types and objects;to develop skills in problem solving and program design; to develop an understanding of abstractions such as methods and control structures; to introduce notions of data abstraction and encapsulation; to provide a grounding in object-oriented programming techniques; to inculcate a component-based approach to large program design; to introduce key aspects of the Java API and Swing;to develop an understanding of data structures and algorithmic complexity;to establish a sound and consistent programming style in Java;to provide experience of collaborative work on solving programming problems; to introduce unit testing and develop an understanding of how to write simple automated tests.','Assessment will be via MOLE quizzes, short programming assignments and larger programming assignments. There will be no written examination for this module.','Introduction to Java programming variables and assignments;datatypes;classes and objects;the Sheffield package - EasyReader, EasyWriter, EasyGraphics;introduction to the Lego Mindstorm Robots;problem solving and program design Object Oriented Programming classes;methods and parameters; object composition;inheritance;polymorphism. Object-oriented programming and design information hiding;abstract data types;refactoring. Testing JUnit. Advanced programming exception handling;threading; recursion. components of the the Java API Input and output; Collections;Swing;specifying and developing a graphical user interface.','20','On assignment hand back sheetsIn lectures (going through class test QandAs)In lab classes (going through exercises and assignment problems).','Dr Siobhán North and Dr Mari-Cruz Villa-Uriol','com1003','Java Programming','By the end of this course, students will: understand the difference between a variable, value and object;understand procedural abstraction and the passing of arguments and results;understand how to structure basic Java programs to solve simple problems;understand how to design an encapsulated data type with private and public aspects;understand what is meant by object-oriented and component-based programming;understand the time and space trade-offs between different implementations of collections;understand the basics of visual application programming using Swing;demonstrate the ability to work as part of a small group in order to solve a programming problem; demonstrate an understanding of how to produce unit tests for checking that written code is working as expected.','Academic Year 2018/19','This module introduces programming concepts through the Java programming language. Program design and the use of testing to drive program creation are also covered. Initial focus is placed on the structured aspects typical of many programming languages: the ideas of a sequence, selection and repetition. The object-oriented approach to building large software systems from components is then presented. Throughout the module, emphasis is placed on the practice of writing well-structured and readable programs to solve problems.','Lectures and laboratory sessions.'),('The aims of the module are to provide students with the historical and cultural context of modern day research into artificial intelligence to introduce the student to the AI research carried out in the Department. to introduce a number of classic AI problem-solving algorithms and data structures to develop an ability to select appropriate techniques to address particular problems. to develop the technical knowledge necessary to implement AI problem solving to provide experience of scientific programming as opposed to software engineering.','Semester 15 assessed labs (4% each) = 20%2 quizzes (15%) each) = 30%Semester 22 assignments (12.5% each) = 25%Formal exam (MOLE) = 25%','Semester 1 content: Semester 1 addresses foundational questions in AI about the nature and possibility of artificial intelligence, provides a brief historical overview of the subject and also reviews the state-of-the-art and open questions in some of the major subareas of AI. The labs will introduce students to programming the Miro robot via a simulator.Topics covered in Semester 1: What is intelligence? Is AI Possible? Turing Test Chinese Room Argument and Strong versus Weak AIPhysical Symbol System Hypothesis and computationalism Origins and Early History of AIOpen Questions in some of: RoboticsMachine LearningMachine VisionSpeech and Language UnderstandingKnowledge Representation and ReasoningEthics and Artificial IntelligenceSemester 2 content: In contrast to semester 1, the objective here is to give students knowledge and experience of AI programming by implementing classic symbolic problem-solving paradigms. It also provides students with experience of programming for scientific research in contrast with software engineering. Topics covered in Semester 2: State-space search: search algorithms and strategies. The dynamic programming principle and A* search Symbolic knowledge representation and pattern matching. Reasoning in deductive systems: forward and backward chaining, production systems, rule networks and the RETE match algorithm. Planning and goal reduction AI, Connectionism and Perception - limitations of symbolic reasoning.','20','Semester 1: Labs will be marked in lab sessions; short assignments will be marked via a simple tick scheme and returned within 3 weeks of submission. Semester 2: Assignments will be marked using published criteria and the submissions commented. They will be returned within 3 weeks of submission.','Prof. Rob Gaizauskas, Prof. Tony Prescott, Dr Heidi Christensen and Prof. Phil Green','com1005','Machines and Intelligence','By the end of the course the students should: be aware of the main issues involved in defining intelligence, and of the changing views of intelligence appreciate key representative programs developed during the course of AI research be aware of the major sub-areas of AI and of the problems addressed in these sub-areas be aware of the ethical issues surrounding AI research and the potential consequences of this research understand a number of different algorithms and data structures for AI problem solving understand the role of knowledge as information to guide heuristic search be able to select appropriate techniques to address particular problems be able to program search, inference and planning algorithms be able assess the problem-solving performance of such algorithms experimentally appreciate a number of AI applications that use the techniques described be able to write simple programs to control the Miro robot.','Academic Year 2018/19','This module provides an introduction to Artificial Intelligence, and to key concepts and problems in the field, such as whether a computer is capable of understanding, and whether humans should themselves be viewed as machines. It also provides a brief historical overview of the subject and reviews the state-of-the-art and open questions in some of the major subareas of AI, pointing out connections to research work in the Department. As well as providing a first encounter with the main issues that underlie attempts to create Artificial Intelligence, the module also has a more practical component that introduces algorithms and data structures for AI problem solving through practical programming examples, as well as hands-on experience with simple programming of robots. The emphasis here is on identifying the abstract nature of the problem which is to be solved, matching this to an appropriate algorithm or technique and implementing a solution. It also serves as an introduction to programming for research rather than for software engineering.','Lecture based, with assignments and labs in semester 1. Assignments in semester 2.'),('The aim of this module is to give a fundamental knowledge and understanding of the basic computer structures that underlie computer architectures and to demonstrate how computer systems can be combined effectively into networks.','15% coursework and 85% exam, split as follows: 15% multiple-choice quizzes set by Ramsay Taylor in the Autumn Semester85% Spring Semester examination set by both lecturers covering material from the whole course.','Autumn Semester (Dr Ramsay Taylor) Gates and circuitsBoolean algebraImplementing logicSequential circuitscomputer arithmetic: binary numberscomputer arithmetic: floating pointInstruction set architectureThe structure of the CPUAssembly language programmingAccelerating performancecomputer memory Spring Semester (Dr Joab Winkler) Overview of connected and connectionless networksRouting algorithmsOverview of layered protocolsError detection and correctionAlgorithms for reliable transmission','20','Students will receive feedback on their solutions to laboratory exercise sheets and problem sheets. Solutions to the online quizzes are delivered through the MOLE system with additional feedback, and can also be discussed with laboratory demonstrators.','Dr Ramsay Taylor and Dr Joab Winkler','com1006','Devices and Networks','By the end of this module students should: know how to design functional units using combinatorial and sequential logic;understand the computer representation of integer and floating-point numbers; understand and be able to describe the components of a computer system, and the interfaces between them;understand the structure of a typical computer instruction set, and be able to explain the function of instructions using RTL notation;understand and be able to write simple programs in assembly language;understand how system performance can be accelerated by use of pipelining and cache memory.','Academic Year 2018/19','This module runs throughout the academic year, starting in Autumn and ending in Spring. The module consists of two parts. In the first, important elements of computer architecture are covered including digital logic, computer arithmetic and instruction set architecture. The approach in the module is to show how the basic elements of a computer are constructed and combined to give sophisticated architectures that support accelerated performance via cache memory and pipelining. The second half of the module shows how computing devices can be connected into networks, and covers the principles of layered protocols, error detection/correction and reliable transmission over networks.','Lectures, problem classes and laboratory work.'),('This unit aims to:Expose students to facets of the World-Wide Web and Internet.Provide knowledge of network architectures for computing.Provide knowledge of information security.Develop practical skills in website creation and using relevant tools','25% MOLE Quizzes 50% Website. Assessed on conformance to accepted standards for websites and programming quality 25% JavaScript project','The Web and its Languages Origins of the web Markup Languages, CSS, HTML Web standards Active content, DOM, Javascript Design and accessibilityGraphics, HTML5 canvas, SVGResponsive web design Networks and information security Introduction to packet-switching networks. Networks and related protocols. Risk, practical aspects of security, legal issues','10','During lab sessions (based on exercise sheets) comments on marked assignments, within 3 working weeks.','Dr Emma Norling','com1008','Web and Internet Technology','By the end of the unit, a candidate will be able to: Understand the origin, history and evolution of the Internet and World-Wide Web as a global sharing, social, commercial and computing resource;Appreciate the social and technical benefits and problems associated with the Internet, such as networking, information security, privacy, encryption and regulation;Understand how simple Ethernet-based packet-switching networks operate, using the OSI 7-layer reference protocol;Understand the technologies of browsers and search engines;Describe web content using markup languages (HTML, CSS);Design and construct an interactive website using suitable tools;Understand the issues of accessibility in relation to websites;Employ a programming language to develop interactive web content (JavaScript).','Autumn 2018/19','This module is for students studying computer Science as a main subject. The Web and the Internet are now pervasive in modern life, providing an information resource, supporting ‘cloud computing’, and promoting novel, interactive solutions to computing-related activities. This module will cover the basics of networks and internetworking, information security and the technologies that are used in Web development, with an emphasis on building a simple interactive website using HTML, CSS and JavaScript','The module will be delivered as a series of lecture topics, timed to coincide with the skills required for the practical work. The lab classes will develop the practical skills required to build a website.'),('The module aims to:Introduce students to algorithmic thinking and equip them with techniques for solving computational problems algorithmicallyDemonstrate the need for efficient algorithms, i.e. algorithms whose computation time scales well with the input sizeEnable students to analyse the efficiency of an algorithm, hence distinguishing efficient from inefficient solutionsExplain basic data structures, their efficiency in performing elementary operations for storing and retrieving data, and how they can be used in the design of efficient algorithmsTeach general-purpose algorithmic design principles, including greedy algorithms, divide and conquer, and dynamic programmingCover algorithmic solutions to classical and illustrative computational problems such as sorting and finding shortest paths in networks, with a focus on their design and computational complexity.','70% formal examination 30% marked problem sheets','Planned topics include:Algorithms as a technologyEfficiency of AlgorithmsDesign and Analysis of Algorithms for Sorting Insertion sortHeap sortMergesortQuicksortLinear time sortingData Structures Stacks and QueuesLinked listsBinary search treesBalanced treesGraphsDesign and Analysis of Graph Algorithms Searching in graphsFinding shortest paths in graphscombinatorial graph problemsAlgorithmic Design Paradigms Greedy algorithmsDivide and conquerDynamic programming','10','Students will receive continuous feedback e.g. on their marked assignments, during tutorial sessions and during lectures.','Dr Dirk Sudholt and Dr Pietro Oliveto','com1009','Introduction to Algorithms and Data Structures','At the end of the course students will be able to Appreciate what constitutes an efficient and an inefficient solution to a computational problem;Analyse the efficiency of an algorithm;Evaluate and choose data structures that support efficient algorithmic solutions;Identify and apply design principles such as greediness, divide and conquer and dynamic programming in the design of efficient algorithms;Describe efficient algorithms for fundamental computational problems, along with their computational complexity.','Spring 2018/19','Algorithms and algorithmic problem solving are at the heart of computer science. This module introduces students to the design and analysis of efficient algorithms and data structures. Students learn how to quantify the efficiency of an algorithm and what algorithmic solutions are efficient. Techniques for designing efficient algorithms are taught, including efficient data structures for storing and retrieving data. This is done using illustrative and fundamental problems: searching, sorting, graph algorithms, and combinatorial problems such as finding shortest paths in networks.','The theoretical background and techniques will be presented in a series of lectures. Students will reinforce the material through self-study, and through weekly problems classes.'),('This unit aims to: develop an understanding of types, values, functions and expressions; develop an understanding of programming as the simplification of expressions; develop an understanding of recursion and recursive function design; introduce notions of pattern matching, algebraic data types, lazy programming ; introduce the concepts of partial application and higher-order functional programming; introduce the formal concept of an ADT with its operations and axioms; develop skills in conceptual program design viewed as collections of ADTs; deepen an understanding of data structures and algorithmic complexity; develop logical reasoning skills about abstract properties of ADTs; develop skills for proving correctness of algorithms and ADTs;enhance recursive, parametric and higher-order programming skills.','Assessment will be 100% courseworkThis module has the explicit objective of developing programming skills. Failure to develop and submit programs of a minimum satisfactory standard will result in loss of credits, notwithstanding the weighting of coursework components.','Semester 1 Basic functional programming and Haskell Introduction to functional programming: functions, parameters, arguments, binding, environments and types;Built-in types such as Integers, Reals and Lists;Recursive function definitions: tail recursion and general recursion;Function definition using multiple equations, patterns and guards. Further topics in functional programming: [ 5 lectures ] Anonymous functions;Higher order functions;Partial application;User-defined data structures and type classes. Design and verification of functional programs: [ 4 lectures ] Top-down design and bottom-up implementation of functional programs;Algebraic data typesData abstraction. common data structures: [ 3 lectures ] Linear structures, stacks, queues, linear lists;Non linear structures, trees, sets.Semester 2 Abstract Data Typesspecification of ADTsdata structures and their efficiencyimplementationProgram Proofinduction over integersstructural inductionloop invariantscomplexitycomparing the efficiency of different algorithmsfinding the worst-case time complexity of specific programsMonadsHaskell\'s I/O systemMonads in general','20','Assignments marked using published criteria, submission commented and returned by MOLE within 3 weeks.','Prof. Phil Green and Dr Mike Stannett','com2001','Advanced Programming Topics','By the end of the unit, a candidate will be able to:understand the functional model in which a program is a set of nested expressions; be skilled in the design of recursive functions using base and recursive cases; understand the use of partial and higher-order function application techniques; be skilled in the construction of practical, declarative and modular programs; define Abstract Data Types, with their operations and axioms; interpret a real world system and model it at an abstract level, using ADTs; select appropriate data structures and algorithms to solve problems efficiently; analyse the computational complexity of algorithms;complete simple proofs derived from axiomatic properties of ADTs; complete simple inductive proofs of algorithmic correctness;implement ADTs effectively in Haskell, using recursion, parametric polymorphism and higher order applicative techniques.','Academic Year 2017/18','This module will be based around Functional Programming (FP) and Abstract Data Types (ADTs). FP leads to simple, elegant programs that are provably correct, expressing problems declaratively and recursively. Topics covered include: values, types, expressions, functions, pattern matching, recursive function design, partial application and higher-order functions. An ADT is a computational data structure, such as a list or tree, that can be defined abstractly in terms of the formal properties of its operations. The course will encourage program design from an abstract viewpoint, as a collection of interacting ADTs, and will also cover complexity analysis for algorithms and proof of correctness.','There will be up to 3 lectures per week, with not more than 20 lectures per semester.As well as the lectures there will be surgeries as required.Practical work will develop the ability to define recursive algorithms to solve problems and design Haskell programs to implement these algorithms.'),('This unit aims to: Provide the psychological foundations of human-centred design, including abstraction, ergonomics and developer-customer communication. Develop group-working skills in applying software analysis and design methods to create software systems for target customer groups. Develop technical software development skills, including heterogeneous systems with graphical or web-based interfaces and databases. Develop analytical skills for measuring the usability and ergonomics of software systems.','100% coursework. Group work and individual work.','People and TechnologyHuman-computer InteractionDesigning InteractionHCI and Software EngineeringSoftware Engineering LifecyclesControl Flow ModellingInformation ModellingBehavioural SpecificationDatabase DesignQuery ProcessingArchitectural DesignDesign PatternsDetailed DesignVerification and TestingUsability and Experimental DesignQualitative MethodsQuantitative MethodsStatistical Tests of Significance','20','Dr Maria-Cruz Villa-Uriol, Dr Heidi Christensen - feedback during practical sessions; feedback on marked assessments (two sets of questions) Dr Anthony Simons - feedback during practical mini-labs; formative UML exercises with solutions released weekly in MOLE; feedback on marked group project, with a cover-sheet showing goals met; class email describing main issues.','Dr Heidi Christensen, Dr Maria-Cruz Villa-Uriol and Dr Anthony Simons','com2002','Human Centred Systems Design','By the end of the unit, a student will be able to: Understand and demonstrate the ability to apply principles from human-computer interaction and ergonomics to software development. Understand and demonstrate the ability to manage customer-developer interaction during the requirements capture stage. Understand and demonstrate the ability to apply the principles of user interface design, software architecture design and database design. Work co-operatively in a developer team to deliver a software system that meets the requirements of a target customer group. Evaluate software systems quantitatively and qualitatively for their ease of use by target customer groups.','Autumn 2017/18','This module is concerned with the analysis, design, implementation and evaluation of interactive computing systems for human use; and with the study of major phenomena surrounding them. It will consider the interplay between human users, developers and computers; as such it has a multidisciplinary content with its basis in psychology, human computer interaction and human factors as well as in software engineering and database design.','Lectures, mini-labs, practicals and independent study.'),('This unit aims to:introduce machine models (i.e. models of computation) and the corresponding notions of formal languages;introduce the notion of logics; provide an awareness of the fundamental principles of formal logics and their applications in computer science; enhance analytical and logical skills in reasoning abstractly (about computation and computing systems); provide a thorough grounding for more advanced theory courses.','Formal examination.','Semester 1finite automata and regular languagespushdown automata and context free languagesTuring machines and decidabilitySemester 2syntax and semantics of propositional and predicate logic natural deduction systems for these logics applications of logic in computing and systems engineering (e.g. automated and interactive theorem proving, basics of model checking, types in programming)','20','Feedback on tutorial exercises.','Dr Kirill Bogdanov and Prof. Georg Struth','com2003','Automata, Logic and computation','By the end of the unit, a candidate will:use different machine models and the formal languages they are able to recognise; be able to reason about the computational limitations of different machines; be equipped to use logics for formalising logical arguments and mathematical proofs; be able to use formal logics for modelling and reasoning about computing and control systems; understand applications of logic in areas such as type theory, program and systems correctness, or program security','Academic Year 2018/19','This module introduces the mathematical and logical foundations and tools for modelling and analysing computing systems, incl. state machines, formal languages, logics, proof systems, and proof search procedures.','Lectures and tutorial sessions.'),('This unit aims to: provide an accessible introduction to key concepts in machine learning and pattern processing,demonstrate the application of machine learning in a number of recent research areas,develop an appreciation of the difficulties involved when trying to extract meaning from naturally occurring data with particular reference to data preprocessing, feature extraction, classifier design and efficient learning,To prepare students for specialised data-driven subjects at level 3/4 such as natural language processing, speech processing and computational biology.','Assignment (50%) and examination (50%).','Introduction overview: classification and feature handling Python programming Multivariate data review: linear algebra/probabilitynormal distribution Classification Bayes decision theoryrisk and ROC (receiver operating characteristic)parameter estimation - maximum likelihood estimationcurse of dimensionality and naive Bayes classifier Linear classifiers perceptronXOR problem Instance based approaches nearest neighbour and k-nearest neighbourtemplate matching and edit distance Feature selection discriminabilityfeature selection algorithms Feature generation dimensionality reductionprinciple components analysis Unsupervised learning and approaches to clustering. Density estimation and mixture modelling. Case study: Analysis of how techniques have been applied in a real system.','20','Immediately from problem classes. After each assignment stage through debriefing lecture and individual marking.','Prof. Jon Barker','com2004','Data Driven computing','By the end of the unit, a student will be able to demonstrate how to extract features from data for use by machine learning (ML) techniques, demonstrate the ability to analyze and model data using ML techniques, demonstrate the ability to apply ML in various areas of computer Science, e.g. in natural language processing, audio/speech processing, biological applications and vision processing, demonstrate the ability to use Python for scientific computing.','Autumn 2018/19','This module is intended to serve as an introduction to machine learning and pattern processing, but with a clear emphasis on applications. The module is themed around the notion of data as a resource; how it is acquired, prepared for analysis and finally how we can learn from it. The module will employ a practical Python-based approach to try and help students develop an intuitive grasp of the sophisticated mathematical ideas that underpin this challenging but fascinating subject.','Lectures, problem classes and laboratory classes.'),('The aims of this module are to:provide an understanding of a range of features from the biological world that have influenced the world of computing.foster a basic understanding of the nature biological inspiration for AI, Robotics and computing - the goals and motivations provide a broad overview of how robots are being used in the 21st century develop an understanding of simple computer modelling of biological systems provide a foundation for sensory-motor integration research provide an historical context for biologically inspired systems develop a foundation for biological learning models and self-organisation provide experience of collaborative work that develops biologically inspired solutions to practical problems. provide an understanding of the ethical issues involved in the application of modern robotics to encourage curiosity and motivate further research in biologically inspired research','There will be no written examination for this module. Various group and individual assignments will be set throughout the module.','Bio-inspired computing [10 lectures/practicals]Introduction to Evolutionary AlgorithmsIntroduction to the characteristics of cellular systemsFundamentals of Cellular AutomataApplication of Cellular Automata in exploring Artificial Intelligence and understanding real-world dynamical systemsIntroduction to Artificial Immune SystemsApplication of Cellular Neural computingcomputational models of biological populationsCognition, Interaction and Robotics [10 lectures/practicals] Traditional Artificial Intelligence versus modern robot control methods Biological modelling and swarm roboticsCreating the illusion of intelligence in robotsCurrent and future robot applicationsRobot ethics: concerns about control, deception, privacy and loss of human contactThe link between cognition and control - perceptual control theory The role of memory in cognitive systems The implications of mirror neurons - sensorimotor overlap Human-robot interaction, theory of mind, communication and language','20','Informal feedback on the progress of the Lab group projects will be given during practical sessions. Feedback and marks for the formal assignments will be provided within 3 weeks of hand-in.','Dr Dawn Walker and Prof. Roger Moore','com2005','Bio-Inspired computing and Robotics','At the end of the course we expect students to: understand some of the essential features of biologically inspired systems work effectively in a group environment to select and apply specific bio-inspired computing approaches to solve practical problems be able to critically discuss ethical issues involved in the application of modern robotics understand the interaction between cognition and control be equipped with a knowledge of cellular computing and cellular automata.','Spring 2017/18','This module provides a foundation in biologically inspired computing, artificial intelligence and robotics. It takes inspiration from aspects of biological systems from intelligence, cognition and behaviour down to cellular inspired computing. It covers behaviour-based theory and the basics of learning techniques for robot control as well as biological collective behaviour and self-organisation. The module has a particular emphasis on robotics research and Human Robot Interaction (HRI), which is key to the development of theories and methods that create interactions between AI systems and the world.','Teaching will consist of two sessions per week and will be a mixture of lectures and practical laboratory classes.'),('This unit aims to: Develop customer-oriented interaction, and software analysis and design skills to create robust software systems for target customers; Promote an awareness of common cyber threats and the security policies and design strategies that reduce risk; Develop group-working skills and technical software development skills in building a software system with layered architecture.','Assessment will be 50% formal examination and 50% coursework','Software Engineering – problems, solutions, lifecycles; how to pick an approachInformation Security – vulnerabilities, threats, countermeasures, policies, legal obligationsProject Management – people, product, process; developer-client psychology, biasRequirements Modelling – UML Use Case Diagram; requirements gathering techniquesRequirements Case Study – interactive pair-work; adventure-game style exerciseControl Flow Modelling – UML Activity Diagram; sequence, selection, iteration, compositionInformation Capture – UML Class Diagram; data dictionary, cleaning and structuringInformation Modelling – UML Class Diagram; atomicity/dependency, semantic relationData Flow Modelling – UML Activity Diagram; swim lanes, object flow, coding patternsUser Interface Design – UML State Machine Diagram; screen modes and transitionscommand and Control – reactive vs functional systems; State and command patternsPillars of Security – authentication, authorisation, confidentiality, integrity, non-repudiationDatabase Design – entity relationship modelling, data normalisation to 3NF+Query Processing – from Relational Algebra to SQL; query optimisation, B+-treesJava and Databases – Java Database Connectivity API, MySQL server, SQL injectionsDatabase Options – SQL vs noSQL databases, document-oriented, graph-based DBsInternet Security – HTTPS, cookies, breaking sessions, XSS, phishing, DDOSEncryption – cyphers, cryptanalysis, private key, public key, security applicationsArchitectural Design – UML deployment and package diagrams, case study of DB Administrator, including authorisation, physical secure storageVerification and Testing – formal and informal methods to ensure correctness','20','Assignments marked using published criteria, submission commented and returned by MOLE or by email within 3 weeks.','Dr Anthony Simons and Dr Neil Walkinshaw','com2008','Systems Design and Security','By the end of the unit, a candidate will be able to:Choose an appropriate software lifecycle and project management strategy for different kinds of software project (aim 1); Analyse the different mind-sets of the developer and customer and mitigate the effect of bias in requirements analysis and design (aim 1) Use appropriate software analysis and design models to capture the essentials of a design succinctly and accurately (aims 1, 3); Collate and structure business information appropriately for the design of a robust database (aims 1, 2, 3); Create an uncluttered, intuitive user interface that supports the business process of the customer (aims 1,3); Apply principles of design patterns and architectural style to achieve separation of concerns (aims 1,3); Identify and mitigate threats to the security of the system, by taking appropriate countermeasures (aim 2); Work co-operatively in a developer team to deliver a software system that meets the requirements of a target customer (aim 1,2,3); Know how to test a software system to ensure robust and correct behaviour (aims 2,3).','Autumn 2018/19','This module is concerned with the software systems design process, including security issues. It covers the appropriate choice of software lifecyclemodel, the interactions between developer and customer, the conceptual management of information from requirements through to detailed design,the development of an efficient and secure database, the design of robust user interfaces, the validation and protection of stored data, and associatedtechniques to counter common security threats.The two assessments will be: an integrating group project, connecting user interfaces, business processing and data storage; and an individual MOLEexamination. These will be weighted equally.Developing further the Software Engineering theme at level 1 (particularly com1001 and com1003, but also com1008), this 20-credit unit preparesstudents to participate in the Software Hut (com3420) in the Spring.','40 hours of Lectures20 hours of self-study Lab WorkThe lecture classes convey the basic concepts (Objectives 1, 2, 3, 4, 5, 6, 7, 9). Interactive lab sessions reinforce application of the interviewing, analysis and design skills (Objectives 2, 3, 4, 5, 6, 7). Engagement in the group project develops group-working (objective 8) and reinforces systems development skills (objectives 3, 4, 5, 6, 7, 9)'),('This unit aims to: Provide an understanding of the principles and practices underlying human-machine interactions; Provide an understanding of the principles and practices underlying contemporary robotics; Provide practical experience of implementing and evaluating such principles and practices in a collaborative laboratory environment.','Assessment will be 50% Coursework and 50% Laboratory Work','TBC','20','Assignments marked using published criteria, submission commented and returned by MOLE within 3 weeks.','Dr Michael Mangan and Professor Roger Moore','com2009','Human-Machine Interaction and Robotics','By the end of the unit, a candidate will be able to: Demonstrate an understanding of the principles and practices underlying human-machine interaction; Demonstrate an understanding of the principles and practices underlying contemporary robotics; Apply such principles and practices in a collaborative laboratory environment.','Spring 2018/19','This module is concerned with the design and implementation of effective human-machine interaction and the technology underpinningcontemporary robotics. These areas intersect in the field of human-robot interaction. The course has a multidisciplinary content spanningpsychology, human factors, computer science and robotics.','The course will be delivered using a mix of lectures and laboratory sessions. The lectures will convey the principles and the laboratorysessions will deliver the associated practical skills. 20 hours of Lectures 20 hours of Laboratory Sessions'),('This unit aims to: Introduce the standard logics in computer science and their associated proof systems and the main applications of logic in computerscience; Enhance analytical and logical skills in reasoning abstractly (about computation and computational modelling); Provide a thorough grounding for theoretical courses at more advanced levels.','Assessment will be 100% Formal Examination','syntax and semantics of propositional and predicate logicnatural deduction systems for these logicsapplications of logic in computing and systems engineering (e.g. automated and interactive theorem proving, basics of model checking, types in programming)','10','Weekly feedback is provided in the exercise/tutorial sessions.','Professor Georg Struth','com2107','Logic in computer Science','By the end of the unit, a candidate will be able to: Be able to perform proofs in propositional, predicate and modal logics (aims 1 and 2); Explain the principles of automated theorem provers, such as the DPLL and the resolution method (aims 1 and 2); Be able to apply formal languages and reasoning to the design and verification of computing systems (aims 1 to 3).','Spring 2018/19','This module introduces the foundations of logic in computer science. The first part introduces the syntax and semantics of propositional andpredicate logics, natural deduction, and notions such as soundness, completeness and (un)decidability. The second part covers applications incomputer science and beyond, such as automated reasoning and decision procedures, modal and temporal logics for the verification of computingsystems, and type systems for programming languages.','2 formal lectures plus 1 exercise/tutorial session per week.'),('This unit aims to: develop an understanding of types, values, functions and expressions;develop an understanding of programming as the simplification of expressions;develop an understanding of recursion and recursive function design; introduce notions of pattern matching, algebraic data types, lazy programming;introduce the concepts of partial application and higher-order functional programming; enhance recursive, parametric and higher-order programming skills.','Assessment will be 100% Coursework. Coursework will be 100% based on programming assignments designed to cover all learning outcomes. Typically the programmingassignment will be split into two or three sub-stages.','Basic functional programming and Haskell [6 lectures]Introduction to functional programming: functions, parameters, arguments, binding, environments and types;Built-in types such as Integers, Reals and Lists;Recursive function definitions: tail recursion and general recursion;Function definition using multiple equations, patterns and guards.Further topics in functional programming: [ 6 lectures ]Anonymous functions;Higher order functions;User-defined data structures and type classes.Advanced functional programming: [ 6 lectures ]Top-down design and bottom-up implementation of functional programs;Algebraic data typesPartial function applicationLazy ProgrammingFunction compositionThe IO Monad','10','Assignments marked using published criteria, submission commented and returned by MOLE within 3 weeks.','Professor Philip Green','com2108','Functional Programming','By the end of the unit, a candidate will be able to:understand the functional model in which a program is a set of nested expressions;be skilled in the design of recursive functions using base and recursive cases;understand the use of partial and higher-order function application techniques;be skilled in the construction of practical, declarative and modular programs;','Autumn 2018/19','This module introduces the principles of functional programming, using the Haskell programming language. It introduces types and classes, functiondefinitions, list comprehension, recursive and higher order functions, eager and lazy evaluation, and basic data types.','There will be up to 3 lectures per week, with not more than 18 lectures in all.As well as the lectures there will be drop-in sessions as required.Practical work will develop the ability to define recursive algorithms to solve problems and design Haskell programs to implement these algorithms.'),('This unit aims to: Introduce machine models (i.e. models of computation) and the corresponding notions of formal languages; Introduce complexity theory and algorithmic solutions to computationally hard problems; Enhance analytical and logical skills in reasoning abstractly (about computation and complexity); Teach the foundations of theoretical computer science, providing a thorough grounding for theoretical courses at more advanced levels.','Attainment of the learning outcomes is assessed through two exams, that is, one towards the end of each semester. The first exam will assess objectives 1 and 4, the second one will assess objectives 2-4.','Automata Theory (Semester 1) finite automata and regular languages pushdown automata and context free languages Turing machines and decidability computational complexity: P and NP (Semester 2) Reductions and Rice\'s Theorem P vs. NP, NP-completeness Cook\'s theorem Techniques for proving NP-hardness How to deal with NP-hard problems: Parameterized algorithms Approximation Algorithms: Examples for approximation algorithms Polynomial-time approximation schemes Hardness results for approximation Randomization: Examples for randomized algorithms Probabilistic complexity classes','20','Feedback on tutorial exercises.','Dr Kirill Bogdanov (Autumn) and Dr Mike Stannett, Dr Pan Peng, Dr Sebastian Ordyniak (Spring)','com2109','Automata, computation and complexity','By the end of the unit, a candidate will be able to: Use different machine models and the formal languages they are able to recognise as well as be able to reason about the computational limitations of different machines (aims 1 and 3); Show that a problem is computationally easy or hard (aims 2 and 3); Provide algorithmic solutions for computationally hard problems (aims 2 and 3); Explain the foundations of automata and language theory, computability, and complexity (aims 1-4).','Academic Year 2018/19','This module introduces the theoretical foundations for computing systems: finite state machines, pushdown automata, and Turing machines, along with the formal languages that can be recognised by these machine models. It also deals with the question \"What is computable?\" and \"What is efficiently computable?\" by showing when problems are computationally hard, and how to find algorithmic solutions to computationally hard problems.','The theoretical background and techniques will be presented in a series of formal lectures, 2 lectures per week. Students will reinforce the material through self-study, and through weekly problems classes where students will apply analytical skills obtained in class. Both lectures and problem classes are designed to achieve objectives 1-4.'),('to extend mathematical and computational skills; to introduce the notion of a dynamical system; to provide knowledge and understanding of the techniques used for constructing differential equation models of dynamical systems, including their limitations; to provide knowledge of numerical schemes for the simulation of differential equations; to provide practical knowledge of the use of MATLAB for simulating differential equations; to provide knowledge and understanding of the concepts used for constructing individual based models of dynamical systems, including their advantages and limitations; to provide practical knowledge of the use of MATLAB (or Python) for simulating agent-based models; to introduce the application of differential equation and individual-based models to biological systems; to provide a grounding for units at higher levels involving dynamical systems;to provide experience in developing interdisciplinary teamwork skills.','40% assignment based on team project 60% exam','The main focus of the module will be on the use of differential equations and individual based models to simulate the behaviour of natural systems. A number of specific topics will be introduced that will be updated to reflect recent developments, e.g. population dynamicsphysiological processes','10','Students will receive feedback via a feedback session held in the respective lecturer\'s office for whoever would like to see their assignments.','Prof. Eleni Vasilaki and Dr Dawn Walker','com3001','Modelling and Simulation of Natural Systems','By the end of this course the students should be able to demonstrate: a good understanding of the notion of a dynamical system and an ability to develop differential equation models of simple dynamical systems; knowledge of numerical schemes appropriate for different types of differential equation model (e.g. boundary and initial value ordinary differential equations); knowledge of the basic concepts behind the construction of individual based models of dynamical systems an ability to develop and implement code in MATLAB for the numerical solution of differential equation and individual-based models, and visualisation of solutions; an understanding of the use of the different modeling paradigms in the simulation of simple biological systems, and an appreciation of the benefits and limitations of each approach,ability to work productively in a team with members from different academic backgrounds.','Spring 2018/19','This unit will provide a practical introduction to techniques used for modelling and simulating dynamic natural systems. Many natural systems can be modelled appropriately using differential equations, or individual based methods. In this unit, students will explore and understand both modelling approaches. They will gain knowledge of the assumptions underlying these models, their limitations, and how they are derived. Students will learn how to use MATLAB to simulate and explore the dynamics of computational models, using a variety of examples drawn from both natural systems. Students should be aware that there are limited places available on this course.','The course will consist of two 50 minute sessions per week, either lectures or computer practicals, with an additional 50 minutes tutorial or self organised group meeting.'),('This unit aims to: Provide the psychological foundations of human-centred design, including abstraction, ergonomics and developer-customer communication. Develop group-working skills in applying software analysis and design methods to create software systems for target customer groups. Develop technical software development skills, including heterogeneous systems with graphical or web-based interfaces and databases. Develop analytical skills for measuring the usability and ergonomics of software systems.','100% coursework. Group work and individual work.','People and TechnologyHuman-computer InteractionDesigning InteractionHCI and Software EngineeringSoftware Engineering LifecyclesControl Flow ModellingInformation ModellingBehavioural SpecificationDatabase DesignQuery ProcessingArchitectural DesignDesign PatternsDetailed DesignVerification and TestingUsability and Experimental DesignQualitative MethodsQuantitative MethodsStatistical Tests of Significance','20','Dr Maria-Cruz Villa-Uriol, Dr Heidi Christensen - feedback during practical sessions; feedback on marked assessments (two sets of questions)Dr Anthony Simons - feedback during practical mini-labs; formative UML exercises with solutions released weekly in MOLE; feedback on marked group project, with a cover-sheet showing goals met; class email describing main issues.','Dr Heidi Christensen, Dr Maria-Cruz Villa-Uriol and Dr Anthony Simons','com3002','Human Centred Systems Design','By the end of the unit, a student will be able to: Understand and demonstrate the ability to apply principles from human-computer interaction and ergonomics to software development. Understand and demonstrate the ability to manage customer-developer interaction during the requirements capture stage. Understand and demonstrate the ability to apply the principles of user interface design, software architecture design and database design. Work co-operatively in a developer team to deliver a software system that meets the requirements of a target customer group. Evaluate software systems quantitatively and qualitatively for their ease of use by target customer groups.','Autumn 2017/18','This module is concerned with the analysis, design, implementation and evaluation of interactive computing systems for human use; and with the study of major phenomena surrounding them. It will consider the interplay between human users, developers and computers; as such it has a multidisciplinary content with its basis in psychology, human computer interaction and human factors as well as in software engineering and database design.','Lectures, mini-labs, practicals and independent study.'),('This unit aims to: provide an accessible introduction to key concepts in machine learning and pattern processing, demonstrate the application of machine learning in a number of recent research areas, develop an appreciation of the difficulties involved when trying to extract meaning from naturally occurring data with particular reference to data preprocessing, feature extraction, classifier design and efficient learning, To prepare students for specialised data-driven subjects at level 3/4 such as natural language processing, speech processing and computational biology.','Assignment (50%) and examination (50%).','Introduction overview: classification and feature handlingPython programming Multivariate data review: linear algebra/probabilitynormal distribution Classification Bayes decision theoryrisk and ROC (receiver operating characteristic)parameter estimation - maximum likelihood estimationcurse of dimensionality and naive Bayes classifier Linear classifiers perceptronXOR problem Instance based approaches nearest neighbour and k-nearest neighbourtemplate matching and edit distance Feature selection discriminabilityfeature selection algorithms Feature generation dimensionality reductionprinciple components analysis Unsupervised learning and approaches to clustering. Density estimation and mixture modelling. Case study: Analysis of how techniques have been applied in a real system.','20','Immediately from problem classes. After each assignment stage through debriefing lecture and individual marking.','Prof. Jon Barker','com3004','Data Driven computing','By the end of the unit, a student will be able to demonstrate how to extract features from data for use by machine learning (ML) techniques, demonstrate the ability to analyze and model data using ML techniques, demonstrate the ability to apply ML in various areas of computer Science, e.g. in natural language processing, audio/speech processing, biological applications and vision processing, demonstrate the ability to use Python for scientific computing.','Autumn 2018/19','This module is intended to serve as an introduction to machine learning and pattern processing, but with a clear emphasis on applications. The module is themed around the notion of data as a resource; how it is acquired, prepared for analysis and finally how we can learn from it. The module will employ a practical Python-based approach to try and help students develop an intuitive grasp of the sophisticated mathematical ideas that underpin this challenging but fascinating subject.','Lectures, problem classes and laboratory classes.'),('The aims of this module are to: provide an understanding of a range of features from the biological world that have influenced the world of computingfoster a basic understanding of the nature biological inspiration for AI, Robotics and computing - the goals and motivations provide a broad overview of how robots are being used in the 21st century develop an understanding of simple computer modelling of biological systems provide a foundation for sensory-motor integration research provide an historical context for biologically inspired systems develop a foundation for biological learning models and self-organisation provide experience of collaborative work that develops biologically inspired solutions to practical problems. provide an understanding of the ethical issues involved in the application of modern robotics to encourage curiosity and motivate further research in biologically inspired research','There will be no written examination for this module. Various group and individual assignments will be set throughout the module.','Bio-inspired computing [10 lectures/practicals]Introduction to Evolutionary AlgorithmsIntroduction to the characteristics of cellular systemsFundamentals of Cellular AutomataApplication of Cellular Automata in exploring Artificial Intelligence and understanding real-world dynamical systemsIntroduction to Artificial Immune SystemsApplication of Cellular Neural computingcomputational models of biological populationsCognition, Interaction and Robotics [10 lectures/practicals] Traditional Artificial Intelligence versus modern robot control methods Biological modelling and swarm roboticsCreating the illusion of intelligence in robotsCurrent and future robot applicationsRobot ethics: concerns about control, deception, privacy and loss of human contactThe link between cognition and control - perceptual control theory The role of memory in cognitive systems The implications of mirror neurons - sensorimotor overlap Human-robot interaction, theory of mind, communication and language','20','Informal feedback on the progress of the Lab group projects will be given during practical sessions. Feedback and marks for the formal assignments will be provided within 3 weeks of hand-in.','Dr Dawn Walker and Prof. Roger Moore','com3005','Bio-Inspired computing and Robotics','At the end of the course we expect students to: understand some of the essential features of biologically inspired systems work effectively in a group environment to select and apply specific bio-inspired computing approaches to solve practical problems be able to critically discuss ethical issues involved in the application of modern robotics understand the interaction between cognition and control be equipped with a knowledge of cellular computing and cellular automata.','Spring 2017/18','This module provides a foundation in biologically inspired computing, artificial intelligence and robotics. It takes inspiration from aspects of biological systems from intelligence, cognition and behaviour down to cellular inspired computing. It covers behaviour-based theory and the basics of learning techniques for robot control as well as biological collective behaviour and self-organisation. The module has a particular emphasis on robotics research and Human Robot Interaction (HRI), which is key to the development of theories and methods that create interactions between AI systems and the world.','Teaching will consist of two sessions per week and will be a mixture of lectures and practical laboratory classes.'),('This unit aims to: Develop customer-oriented interaction, and software analysis and design skills to create robust software systems for target customers; Promote an awareness of common cyber threats and the security policies and design strategies that reduce risk; Develop group-working skills and technical software development skills in building a software system with layered architecture.','Assessment will be 50% formal examination and 50% coursework','Software Engineering – problems, solutions, lifecycles; how to pick an approachInformation Security – vulnerabilities, threats, countermeasures, policies, legal obligationsProject Management – people, product, process; developer-client psychology, biasRequirements Modelling – UML Use Case Diagram; requirements gathering techniquesRequirements Case Study – interactive pair-work; adventure-game style exerciseControl Flow Modelling – UML Activity Diagram; sequence, selection, iteration, compositionInformation Capture – UML Class Diagram; data dictionary, cleaning and structuringInformation Modelling – UML Class Diagram; atomicity/dependency, semantic relationData Flow Modelling – UML Activity Diagram; swim lanes, object flow, coding patternsUser Interface Design – UML State Machine Diagram; screen modes and transitionscommand and Control – reactive vs functional systems; State and command patternsPillars of Security – authentication, authorisation, confidentiality, integrity, non-repudiationDatabase Design – entity relationship modelling, data normalisation to 3NF+Query Processing – from Relational Algebra to SQL; query optimisation, B+-treesJava and Databases – Java Database Connectivity API, MySQL server, SQL injectionsDatabase Options – SQL vs noSQL databases, document-oriented, graph-based DBsInternet Security – HTTPS, cookies, breaking sessions, XSS, phishing, DDOSEncryption – cyphers, cryptanalysis, private key, public key, security applicationsArchitectural Design – UML deployment and package diagrams, case study of DB Administrator, including authorisation, physical secure storageVerification and Testing – formal and informal methods to ensure correctness','20','Assignments marked using published criteria, submission commented and returned by MOLE or by email within 3 weeks.','Dr Anthony Simons and Dr Neil Walkinshaw','com3008','Systems Design and Security','By the end of the unit, a candidate will be able to:Choose an appropriate software lifecycle and project management strategy for different kinds of software project (aim 1); Analyse the different mind-sets of the developer and customer and mitigate the effect of bias in requirements analysis and design (aim 1) Use appropriate software analysis and design models to capture the essentials of a design succinctly and accurately (aims 1, 3); Collate and structure business information appropriately for the design of a robust database (aims 1, 2, 3); Create an uncluttered, intuitive user interface that supports the business process of the customer (aims 1,3); Apply principles of design patterns and architectural style to achieve separation of concerns (aims 1,3); Identify and mitigate threats to the security of the system, by taking appropriate countermeasures (aim 2); Work co-operatively in a developer team to deliver a software system that meets the requirements of a target customer (aim 1,2,3); Know how to test a software system to ensure robust and correct behaviour (aims 2,3).','Autumn 2018/19','This module is concerned with the software systems design process, including security issues. It covers the appropriate choice of software lifecyclemodel, the interactions between developer and customer, the conceptual management of information from requirements through to detailed design,the development of an efficient and secure database, the design of robust user interfaces, the validation and protection of stored data, and associatedtechniques to counter common security threats.The two assessments will be: an integrating group project, connecting user interfaces, business processing and data storage; and an individual MOLEexamination. These will be weighted equally.Developing further the Software Engineering theme at level 1 (particularly com1001 and com1003, but also com1008), this 20-credit unit preparesstudents to participate in the Software Hut (com3420) in the Spring.','40 hours of Lectures20 hours of self-study Lab WorkThe lecture classes convey the basic concepts (Objectives 1, 2, 3, 4, 5, 6, 7, 9). Interactive lab sessions reinforce application of the interviewing, analysis and design skills (Objectives 2, 3, 4, 5, 6, 7). Engagement in the group project develops group-working (objective 8) and reinforces systems development skills (objectives 3, 4, 5, 6, 7, 9)'),('This unit aims to: Provide an understanding of the principles and practices underlying human-machine interactions; Provide an understanding of the principles and practices underlying contemporary robotics; Provide practical experience of implementing and evaluating such principles and practices in a collaborative laboratory environment.','Assessment will be 50% Coursework and 50% Laboratory Work','TBC','20','Assignments marked using published criteria, submission commented and returned by MOLE within 3 weeks.','Dr Michael Mangan and Professor Roger Moore','com3009','Human-Machine Interaction and Robotics','By the end of the unit, a candidate will be able to: Demonstrate an understanding of the principles and practices underlying human-machine interaction; Demonstrate an understanding of the principles and practices underlying contemporary robotics; Apply such principles and practices in a collaborative laboratory environment.','Spring 2018/19','This module is concerned with the design and implementation of effective human-machine interaction and the technology underpinningcontemporary robotics. These areas intersect in the field of human-robot interaction. The course has a multidisciplinary content spanningpsychology, human factors, computer science and robotics.','The course will be delivered using a mix of lectures and laboratory sessions. The lectures will convey the principles and the laboratorysessions will deliver the associated practical skills. 20 hours of Lectures 20 hours of Laboratory Sessions'),('This unit aims to: Develop \'students\' algorithmic thinking and their ability to analyse the efficiency of algorithms; Enable students to find different approaches for dealing with challenging computational problems; Provide insight into cutting-edge research-led teaching in modern subfields of algorithms theory.','The course will be assessed by 4 marked problem sheets and a 2 hour written exam. Problem sheets will cover questions of various types,from analysing and evaluating the efficiency of different algorithms (learning objectives 1 and 2), practising the use of algorithmic ideas anddesign principles (learning objectives 3 and 4) and describing or simulating efficient algorithms for fundamental problems (learningobjective 5). The exam will cover all learning objectives 1-5 in similar style, so that the problem sheets serve as preparation for the finalexam. The Formal Examination is worth 70% of the module assessment.','The main topics of this course are:Approximation algorithms (2 hours)Randomized algorithms (2 hours)Parameterized algorithms (4 hours) Decomposition-based algorithms (4 hours)Sublinear-time and streaming algorithms (4 hours)Randomized Search Heuristics (3 hours)','10','Assignments marked using published criteria, submission commented and returned by MOLE within 3 weeks.','Dr Pan Peng and Dr Sebastian Ordyniak','com3105','Advanced Algorithms','By the end of the unit, a candidate will be able to: Appreciate what constitutes an efficient and an inefficient solution to a computational problem (aims 1 and 2); Analyse the efficiency of advanced algorithms (aims 1); Evaluate and choose appropriate ways of dealing with challenging computational problems (aims 2 and 3); Identify and apply design principles for the design of advanced efficient algorithms (aims 1-3); Describe efficient algorithms for a range of computational problems, along with their computational complexity (aims 1 - 3).','Spring 2018/19','Algorithms and algorithmic problem solving are at the heart of computer science. This module teaches the design and analysis of advanced efficientalgorithms for solving computational problems. Students learn about general algorithmic tools for solving a variety of optimisation problemsefficiently, and how to design algorithms for challenging problems. A major focus of this module will be on research-led teaching, introducing studentsto cutting-edge research topics in the theory of algorithms.','The theoretical background and techniques will be presented in a series of formal lectures. Students will reinforce the material throughself-study, and through weekly problems classes where students will apply analytical skills obtained in class. Both lectures and problemclasses are designed to achieve the intended learning objectives 1-5.'),('The aims of this module are: to develop an understanding of the fundamentals of text processing; to acquire familiarity with techniques for handling text corpora; to develop an understanding of the basic problems and principles underlying text processing applications.','Exam [75%] Assignment [25%]','Programming for text processing Linguistic backgroundText processing topics, such as: Information retrievalText compressionInformation ExtractionSentiment analysis','10','Students can discuss their lab exercise code during lab sessions. They will receive feedback comments on their marked assignment work later on in the term (prior to the exam).','Dr Mark Hepple and Prof. Rob Gaizauskas','com3110','Text Processing','By the end of this unit, a candidate should be able to: code in a programming language well-suited to text handling identify and explain key techniques that are relevant to performing a number of text processing tasks implement systems able to analyse large volumes of textual data, and to perform basic text processing tasks','Autumn 2018/19','This module introduces fundamental concepts and ideas in natural language text processing, covers techniques for handling text corpora, and examines representative systems that require the automated processing of large volumes of text. The course focuses on modern quantitative techniques for text analysis and explores important models for representing and acquiring information from texts. Students should be aware that there are limited places available on this course','There will be 2 lectures per week, with not more than 20 lectures overall. A third session will be available for lab classes or tutorials some weeks.'),('The aims of this module are: to develop an understanding of the subtleties of concurrent and mobile systems\' behaviours;to develop an understanding of process calculi, in particular CCS and the pi-calculus;to develop the ability to construct models of simple systems in these calculi, and where appropriate to use software tools to investigate their properties; to develop an understanding of the formal semantics of process algebras such as CCS and the pi-calculus; to develop the ability to reason about system behaviour using process algebras and related logics, and to program concurrent systems in Erlang.','The module is assessed by assignment (30%) and written examination (70%).','1. INTRODUCTION Sequential vs concurrent systems; real vs interleaving concurrency; mobile systems. 2. PART ONE: CCSUsing simple equations to represent complex systems; synchronisation and non-determinism; structured operational semantics; flow diagrams and transition diagrams; simulation and bisimulation; the importance of hidden internal actions.Detailed examples: modelling a conversation; modelling an n-place buffer.Modal logics, model checkers and workbenches: using software to reason about concurrent systems.3. INTERLUDE: Other approachesCSP, Petri nets, Mazurkiewicz traces; P systems and other bio-inspired models. 4. PART TWO: Pi-Calculus and its successorsAdding mobility to CCS; transition rules; replication vs recursion; scope extrusion; process equivalence.The computational power of pi-calculus: representing data types and functions as pi-calculus processes.Variations on a theme: stochastic pi, security and ambients, modelling the flow of encrypted data.5. DETAILED CASE STUDY A case study illustrating the techniques used in modelling real-world situations.','10','Students will receive feedback in lectures and during the weekly lab sessions. Weekly exercise sheets will also be provided to help students assess their own progress.','Dr Ramsay Taylor','com3190','Theory of Distributed Systems','By the end of this course the students should: appreciate the fundamental techniques and principles needed to formally specify languages for concurrency;understand the mathematical theory underlying CCS and the pi-calculus and be able to apply it to concrete examples;be able to construct concurrent specifications from requirements, to transform and analyse them using appropriate tools and techniques, and to apply these skills to problems drawn from a number of different fields; appreciate the scope and limits of algebraic techniques in the analysis of concurrency; have developed their ability to critically evaluate their work and to discuss it coherently with others;and have expanded their capacity to model, reason about and evaluate complex systems.','Spring 2018/19','The aim of this module is to set out a strong theoretical basis for the analysis and design of concurrent, distributed and mobile systems. We will use the pi-calculus to model and reason about complex systems, studying both its formal semantics and its many uses, via a number of examples. Students should be aware that there are limited places available on this course.','In addition to lectures, the course will include exercise sheets and tutorial sessions; these will cover both the course material and the use of the programming language Erlang to model concurrent process behaviours.'),('To teach students the theory and implementation of bio-inspired machine learning algorithms.','Assessment will take the form of lab assignments/reports (40%) and a formal exam (60%)','Topics to include: Learning and Memory in Brain CircuitsUnsupervised Learning in Artificial Neural Networks (Oja\'s rule, Principal component Analysis, Clustering/competitive Learning) Reinforcement Learning in Artificial Neural Networks (Temporal Difference Learning and Deep Reinforcement Learning).','10','Students will receive feedback on assignments in writing via MOLE and via an in-class feedback session. Feedback will also be delivered during labs and office hours (upon request).','Prof. Eleni Vasilaki','com3240','Adaptive Intelligence','By the end of the course, students should have developed an understanding of basic neuroscience concepts and experimentsbe able to read relevant textbooks and research articles understand the theory, implementation and application of unsupervised and reinforcement learning algorithms be able to write research reports','Spring 2018/19','This course will examine the theme of bio-inspired Machine Learning and in particular of Unsupervised and Reinforcement Learning in Neural Networks. The first half of the course covers Unsupervised algorithms (Clustering, Principal component Analysis) that could potentially have biological counterparts in the human or animal brain. The second half of the course introduces the theory of Reinforcement Learning in a simple and intuitive way, and more specifically Temporal Difference learning and the SARSA algorithm. It also discusses state-of-the-art methods (Deep Reinforcement Learning).','The course will be delivered in one lecture session each week, backed up by interactive, in-class exercises and homework. Additional practical work and lab sessions will be involved. Group discussion of issues relevant to the course will be encouraged. Self-study of the course is also required, supported by a variety of resources (e.g. journal articles, books). Knowledge of programming (Matlab or Python) is compulsory.'),('This module aims to: Prepare students for working in a team in a professional environmentRaise students’ awareness, abilities and knowledge relating to the activities involved in the development of an effective landing page and marketing strategy, and in particular the relevant aspects of software engineeringProvide students with experience of developing an effective landing page and marketing strategy using agile practices and industrial tools','20% individual assessment (breadth of knowledge tests, and reflections on performance). 80% team assessment (presentations, and a project, with peer review).This module has the explicit objective of developing teamwork skills. Participation in teamwork is mandatory and absence will result in deductions of marks and eventually loss of credits.','The precise experience of students will depend on the nature of their project, but will always involve developing an effective landing page (using Ruby on Rails) and marketing strategy whilst exploring the following topics:Coding (pair programming, standards)Design (mockups, parallel prototyping, personas)Marketing (customer research, landing pages, metrics, strategy)Process (Agile, burnup charts, continuous delivery, Kanban, planning, process improvement, retrospectives, risk management)Quality (accessibility, error handling, reliability, security, user experience)Requirements (acceptance criteria, estimation, prioritisation, story mapping, user stories, value statements)Testing (automated testing, manual testing)','30','Students will meet weekly as a team with their mentor to discuss their progress and plans. The mentor will offer feedback and guidance, and encourage the students to be proactive in developing their knowledge and skills in appropriate areas. Students will be required to provide draft submissions for elements of their team project throughout the semester so that mentors are able to review these. Students will hold regular retrospectives as a team where they will review their own practices and identify opportunities for improvement. Mentors will facilitate and/or observe these retrospectives as needed to ensure they are effective, and offer feedback and guidance to students on their facilitation of and participation in retrospectives. At the end of each breadth of knowledge test a score will be provided in the online learning environment. Following this, explanatory comments will be emailed for the questions that are most frequently answered incorrectly by the cohort. Following the end of each semester, students will be emailed both team and individual marks and feedback sheets. These will include marks and explanatory comments for appropriate activities as described in the module mark scheme. Much of the feedback and guidance provided will relate to the performance of the team (which accounts for 80% of the assessment) rather than the individual. However, individual feedback and guidance will also be provided where issues are highlighted in peer reviews or where mentors have specific observations.','Harriet Holman (module co-ordinator), Ryan Bibby, Chrissie Elliott, James Gregory, Chris Murray, Lauren O\'Hara and Mr Andrew Stratton.','com3301','Experiencing Genesys','By the end of the module, students will be able to:Explain some of the organisational and technical issues that underlie the development of an effective landing page and marketing strategyApply agile practices, and make use of industrial tools, during the development of an effective landing page and marketing strategyIdentify valuable requirements by having conversations with, and gaining feedback from, project stakeholdersDesign usable landing pages that demonstrate an awareness of user needsFacilitate the prioritisation of requirements by collecting and interpreting appropriate dataBuild and release an appropriately secure and robust landing page using Ruby on RailsCritically reflect on performance as an individual, and as a team, and adapt behaviours and processes appropriatelyCreate an effective landing page and marketing strategy as part of a team.','Academic Year 2018/19','This module is an introduction to the processes involved in working with real customers and solving business problems, using agile practices. Students work in teams to develop an effective landing page and marketing strategy, supported by staff from epiGenesys. In a marketing context a landing page is a web page (or a small website) designed for a single objective; in this module the purpose is to inform and persuade customers of the benefits of a commercial software product. The landing page will form a key component of a marketing strategy that has the goal of increasing sales of the product.','During the year students will work in teams to create an effective landing page and marketing strategy. In the first 7 weeks of each semester training will be provided in a flipped classroom style. Students will study material in the online learning environment and attend training sessions, whilst also working on their team project. For the remainder of each semester students will continue to work on their project. Students are expected to be proactive in developing their knowledge and skills, using the training as a foundation and seeking guidance from their mentor as needed.'),('Students will learn how to manipulate data sets and databases through batch and transaction processing, and learn how to design and develop System z applications. Additional topics include networking, logical partitioning, device sharing, clustering, and continuous availability.','Written examination at the end of the semester [ 40% ] Practical assignments [ 60% ]','Introduction to mainframes, z/OS, ISPF and TSODatasetsBatch processing, JCL and JESHardware overview, virtualisation, z/VM and LinuxTransaction management, CICS and IMS TMDatabase management DB2 and IMS DB Systems programming and administration.','10','In the lab classes Written comments on the marked assignments.','Lectures and practicals are given by Dr Malcolm Beattie from IBM, Prof. Richard Clayton handles Departmental link','com3310','Mainframe computing','By the end of this course the students should be able to: analyse and evaluate the basic concepts of mainframe computing architectures and specifically the System z Operating System; demonstrate both a theoretical and practical knowledge of the fundamentals of mainframe computing and the System z Operating System; demonstrate a professional understanding of mainframe computing.','Autumn 2018/19','This module will introduce students to the design of mainframe systems, showing how they are optimised to integrate business applications, coping with critical transactions and the ever-evolving demands of e-business. Students will gain a professional familiarity with the System z operating system, which underpins the IBM mainframe - the industry standard. Students should be aware that there are limited places available on this course.','Teaching will be via lectures and laboratory classes. Lectures will be given by staff from IBM, and will provide background and knowledge to mainframe computing and the System z operating system. Laboratory classes will develop students\' practical ability with mainframes, and in particular the ability to perform tasks such as data manipulation and system organisation.'),('This module aims to give students insights into real working practices and issues in the IT industry. Students will develop their skills in understanding and engagement of the material discussed in the Industry Lectures by taking part in question/answering sessions, and participating in follow-up discussions. Students will develop their critical and analytic abilities by engaging in debate in the follow-up seminars, and by commenting on the issues raised in an essay.','Lecture summaries [50%] Essay [50%]','10 of the lectures will be chosen for analysis, and students will view these individually, and then discuss each one in the seminars.','10','Through discussion of the recorded lectures in the follow-up seminars.','Prof. Tony Prescott','com3330','Critical Evaluation of Industrial Opinion','By the end of this course the students should be able to:Understand working practices, challenges and issues prevalent in the IT industry and workplace, technology innovation and technology road mapping; Critically evaluate working practices, challenges and issues prevalent in the IT industry and workplace; Discuss and defend their own opinions on industrial issues;Record their own ideas on and analyses of industrial issues in written form.','Academic Year 2018/19','This module features recorded Industry Lectures from individuals in prominent positions (\'gurus\') in the IT industry, who talk on their working practices and issues from both a managerial and technical perspective. A library of these is provided as part of the Tech Partnership Information Technology for Management and Business (ITMB) programme, and further lectures will be added during the year. Students will participate in seminars in which the content of the lectures will be critically discussed and evaluated. Students will summarise each lecture and complete an essay on a topic related to the lectures.','Teaching will be via the Industry Lectures and follow-up discussions. The Industry Lectures are organised centrally by the Tech Partnership for all universities participating in its ITMB programme, and the library of them is made available to the participating universities, including this department. Follow-up discussions will explore and critically evaluate the content of each lecture.'),('The aims of this module are: to gain experience in dealing with external clients from industry and in understanding and managing clients expectationsto experience, in a competitive environment, the practical problems of constructing, managing and deploying a medium-sized software project, producing the associated user documentation and providing training and online support to examine selectively and use some of the tools and techniques available to solve these practical problems to understand the processes involved in the quality assurance of software and accompanying documentation to apply consistently programming standards to develop team working skills to prepare students for higher level project work, such as the individual Research Project and the Genesys Solutions software company','There will be no written examination for this module.  Assessment will be entirely on the basis of the project work undertaken in teams. 50% of the mark is awarded by project supervisors (course lecturers), who assess each team\'s management of their project: 50% of the mark is awarded by project clients (company managers), who assess the quality of the systems developed by different teams. This module has the explicit objective of developing group teamwork skills. Participation in teamwork is mandatory and failure to participate will result in deduction of marks and eventually loss of credits. Furthermore, this group teamwork exercise cannot be repeated within the academic year. Failure will normally result in repeating the year.','Teamworking: group project vs individual project roles in a team documents used by the team Requirements Engineering (classic OO vs XP): Requirements Capture and Analysis Identifying non-functional requirements Requirements Specification Requirements Validation Managing changing requirements Managing Software Development Projects: Project management strategies Project planning tools Quality management strategies Reviews and inspections Testing strategies and test plans Use of Prototypes: Reasons for prototyping Characteristics of prototypes Use of prototypes for requirements elicitation and validation Software Documentation: Usable Requirements Specification documents User manuals and on-line user support','20','Feedback is provided on a weekly basis at the management meetings. There will also be feedback from both client and managers at the end of the module.','Dr Emma Norling, Mr Andrew Stratton, Dr Ramsay Taylor, Prof. Tony Prescott and epiGenesys','com3420','Software Hut','By the end of this course the students should: have undertaken a real system development project for an external client have experienced and developed an ability to manage, team work be able to apply software project management and quality assurance techniqueshave delivered and deployed a software product in a competitive environment to a deadlinehave produced adequate user documentation, training material and online support material have developed a software product that satisfies the client\'s expectationshave used methods and tools for project management, version control, testing','Spring 2018/19','The Software Hut (a microcosm of a real Software House) gives students an opportunity to experience the processes of engineering a real software system for a real client in a competitive environment. The taught element covers the tools and technologies needed to manage software development projects successfully and to deliver software products that meet both client expectations and quality standards. Topics that are put into practice include: the requirements engineering process; software modelling and testing; using specific software development framework(s); group project management etc. Tutorials take the form of project meetings, and so are concerned with team management, conduct of meetings and action minutes.','The course is centred around the project, which involve the students working as teams to develop an application for an external client. There will be lectures in weeks 1-4. The lectures are primarily to provide training in the tools and technologies used to support the projects, and emphasis is placed on the application of their content to practical software development.There will be a management meeting each week.'),('The aims of this module are to: integrate further the material learned throughout the degree course, by applying it to a substantial open-ended problem; give the student the opportunity of bringing an individual piece of work, in a topic area of their own choosing, to completion; promote design and problem-solving skills, especially the ability to translate a theoretical approach into practice, overcoming any unexpected obstacles;promote academic presentation skills, especially those of technical report writing, visual and oral presentation and question handling;give the student the further opportunity to demonstrate and improve their personal skills, particularly those of time and work management.','Please note that it is expected that the underlying work for the project will be split evenly between the semesters. In particular, work is expected to continue at the end of the Autumn semester, after the interim report is submitted. The total amount of work, which will be reflected in the content of the final dissertation, is expected to be around three quarters of that done by students taking com3610. Description, due at the beginning of the first semesterSurvey and analysis between 2500 and 5000 words, due towards the end of the first semester. Final dissertation and project presentation. The main assessment of the module is by a dissertation that is produced towards the end of the second semester, complemented by a poster presentation at a session where the work done is to be demonstrated and questions answered. If considered appropriate by the examiners an oral examination may be held on this dissertation and project presentation.','The content of the project is typically selected by the student from a range of topics proposed by staff or industrial partners of the department. Students are also encouraged to propose their own topic, provided they can find a supervisor willing to supervise it and with the agreement of the Projects Officer.','30','Students will receive formative feedback on their interim report in a meeting with their supervisor, as well as during their regular meetings.',NULL,'com3500','Individual Research Project ','By the end of this course the students should: have increased their understanding of practical, experimental or theoretical approaches to tackling the research problem under investigation;have demonstrated an ability to evaluate critically and select from the different design solutions relevant to the research problem under investigation;have completed a major original piece of work in a systems design, experimental or theoretical area, based on the relevant background research literature;have prepared a poster and a research dissertation giving a survey of the literature, an analysis of the topic area, a detailed design and an evaluation of the project\'s results;have demonstrated an ability to manage their own time effectively, undertake work on their own initiative and develop plans to progress the work further.','Academic Year 2018/19','In the individual research project, you will complete a major original piece of software design, experimental investigation or theoretical proof. This work will be reported formally in a research dissertation and also presented at a poster session, to which industrial representatives, students and academics are invited. The work will include an Interim report that consists of an initial survey and literature review. You will be engaged in a major piece of software development, or the design and execution of an empirical experiment, or the elaboration and practical verification of a theory. You will have regular meetings with your supervisor, who will advise on any problems you encounter. You will prepare a dissertation of between 6000-12000 words in length, which includes the material from the interim report, but also contains a complete design, implementation and evaluation of the results of your project. This may be assessed by oral examination.','The student is expected to meet the supervisor regularly for 30-60 minutes, in order to discuss progress with the work and obtain advice on it. The rest of the work they are expected to plan and carry out independently.'),('To raise students’ awareness of the different types of computer attacks and their effect on data privacy and business function To give students a grounding in the fundamental principles of data encoding/decoding and encryption/decryption;To give students some practical knowledge of how these technologies can be used to ensure better data and system security','Formal Examination [70%]; Coursework/MOLE Quizzes[30%]','Lectures will cover: Security FundamentalsAccess ControlCryptographic FoundationsSignatures and PKIsCrypto AttacksSecurity ProtocolsFormal Analysis of Security Protocols using Model CheckingApplication/Software SecurityThreat ModellingSecure ProgrammingSecurity TestingStatic code analysisSecure Operations and ForensicsThe lecture includes lab sessions that require an understanding of Linux systems and programming skills.','10','Students will receive feedback in the tutorial sessions in which solutions for the problem sheets are discussed as well as in the lab sessions.','Dr. Achim Brucker','com3501','computer Security and Forensics','By the end of the unit, a candidate will understand: The complexity of the security landscape;The potential vulnerabilities associated with authentication;The advantages and disadvantages of encryption and decryption techniques;The vulnerabilities of wired and wireless networks. They will have demonstrated: A detailed understanding of industrially relevant issues relating to computer security and forensics. The ability to present material in a concise yet comprehensive manner, and to target that material appropriately to the audience in question','Spring 2018/19','This module provides, in general, an introduction into computer security and forensics. In particular, this module focuses on approaches and techniques for building secure systems and for the secure operation of systems. The module complements the mathematics module MAS345 and requires a solid understanding of mathematical concepts (e.g., modulo-arithmetic, complex numbers, group theory) and logic (set theory, predicate logic, natural deduction) as, e.g., taught in the modules com365, com1001, and com2003). Moreover, the module requires a solid understanding of a programming language (e.g., Java, Ruby or C), basic software engineering knowledge and an understanding of database and Web systems, as, e.g., taught in the modules com1003, com1008, com1009, com2001, com6471, and com6102). The lab sessions require a basic command of Linux in general and the command line (shell) in particular. Students should be aware that there are limited places available on this course','Lectures and some practical work.'),('to describe speech production and perception in humans; to teach computational techniques for analysing speech signals.','2 programming assignments (introductory exercise - 10%, main exercise - 45%, total - 55%) 2 Invigilated MOLE quizzes (MOLE quiz 1 - 20%, MOLE quiz 2 - 25%, total - 45%)','Half of the course is devoted to the nature of speech and half to speech signal processing. Topics covered include: speaking, hearing, sounds and symbols, articulatory and acoustic phonetics, phonology, prosody, speech spectra, sampling, fourier transform, linear filters, linear prediction cepstral analysis.','10','Verbal interaction during lecturescomments attached to the marks given to the formal assignments.','Prof. Roger Moore','com3502','Speech Processing','By the end of the unit, a student will have acquired: an understanding of the basic mechanisms of speech production and perception; familiarity with acoustic-phonetic descriptions of the speech signal; an understanding of analysis techniques; an ability to implement speech analysis algorithms; basic knowledge of discrete-time signal processing;','Autumn 2018/19','This module aims to demonstrate why computer speech processing is an important and difficult problem, to investigate the representation of speech in the articulatory, acoustic and auditory domains, and to illustrate computational approaches to speech parameter extraction. It examines both the production and perception of speech, taking a multi-disciplinary approach (drawing on linguistics, phonetics, psychoacoustics, etc.). It introduces sufficient digital signal processing (linear systems theory, Fourier transforms) to motivate speech parameter extraction techniques (e.g. pitch and formant tracking). Students should be aware that there are limited places available on this course.','Lectures and scheduled access to a Laboratory for practical work'),('to provide a comprehensive theoretical and practical approach to the foundation topics in three-dimensional computer graphics; and to make use of a graphics API (application programming interface) for the construction of 3D computer graphics software','Formal examination (2 hours) [60%]. Programming assignment [40%].','Coordinate systems and transformations [2 lectures] Building and Representing Objects [ 3 lectures ] The graphics pipeline [ 1 lecture ] Rendering [ 3 lectures ] Incremental shading Hidden surface removal The Z-buffer Anti-aliasing Simulating 3D Reality [ 7 lectures ] Simple light object interaction Textures and shadows Advanced light object interaction computer Animation [ 3 lectures ] Review [1 lecture]','10','Ongoing during lab sessions via online help and in office hours; Final feedback sheet for the assignment','Dr Steve Maddock','com3503','3D computer Graphics','By the end of this course the students should: be able to use matrices to transform (hierarchical) objects in 3D coordinate systems; be able to describe and apply a 3D viewing pipeline to display data-structured objects, modelled in a world of real numbers, on a discrete, raster screen device; be able to reason about the most suitable modelling techniques to use for particular real-world applications; be able to implement standard 3D shading and rendering techniques using a library of graphics routines; understand and be able to describe and discuss a range of techniques for increasing the realism of rendered scenes; understand and be able to compare and contrast advanced rendering techniques; be able to describe and discuss a range of computer animation techniques; understand and be able to implement a range of three-dimensional computer graphics algorithms; be able to describe how computer graphics techniques are used in a variety of application areas in the entertainment industry.','Autumn 2018/19','This module is an introduction to the techniques used in modern 3D computer graphics. It deals with fundamental techniques that are the basis of work in a range of industries, e.g. entertainment and computer-aided design. Both basic and advanced topics concerned with the production of images of abstract 3D objects are covered, including: 3D representations and manipulations in graphics, light reflection models, realism techniques such as shadows and textures, ray tracing and 3D animation. Students should be aware that there are limited places available on this course.','In addition to the formal lectures, there will be approximately 10 hours of practical sessions related to learning OpenGL, as well as online help with the assignment work.'),('The Web will look quite different in five years’ time. This unit aims to let students aware of the changes in Web technologies that are currently taking place, and to prepare them for the coming future. Such changes involve the use of intelligent techniques that will allow more focused searches and the creation of a new breed of automatic services based on intelligent agents. The aim of the module is to describe the main approaches to the advanced web to develop students\' skills in designing and building serious advanced systems for the Web','Group Coursework [100%].','Part I: Setting the Scene: A history of the Internet and the WebPresent and Future Web Part II: Clients and Servers HTTP protocolClient server architectures in NodeJsAsynchronous and synchronous client/server connectionsAccessing remote noSQL databases Socket.io and WebRTC for Web video communicationThe mobile Web: progressive web apps and hybrid appsPart III: horizon scanning Spidering the Web and search engines: why where and whatWeb 2.0 and 3.0: why and what Part V: The Web of Data Linked Open Data Part VI: Conclusions The future as seen from here.','10','Students will be given formative (i.e. non marked) feedback on the first part of the assignment within three weeks of submission.','Prof. Fabio Ciravegna','com3504','The Intelligent Web','On completion of this course, students should: Know the basics of Web searching and how to design a crawler and a client server architecture Know about a number of state-of-the-art intelligent web methodologies Have an in-depth knowledge about in client server architectures supporting services such as noSQL databases and connections to remote APIsBe able to write or customize a web system which uses the Web of Data and Web 2.0 techniques','Spring 2018/19','This course is concerned with getting acquainted with the present and future of the intelligent Web. We will read and discuss both introductory descriptions and cutting-edge research papers. Topics will include: Basic technologies for searching and mining the WWWLarge scale methodologies for the Web (e.g. Mapreduce) Client server architecturesAdvanced mobile Web apps Web 2.0 and Web 3.0 concepts, including mining social media (e.g. Twitter and Facebook) The Web of Data and the Semantic Web. Students should be aware that there are limited places available on this course.','Students learn the course matter through a mixture of lectures, tutorials and laboratories. Each week there will be 2 hours of lecture/tutorials and from the third week of semester, 1 hour of supervised laboratory work.'),('This module aims to...prepare students for tasks that commission, design and develop Internet of Things (IoT) technologiescover a broad range of IoT history, approaches, commercial devices and platforms deliver practical experience programming IoT devices, capturing their data and developing visual analytics of that data','Assessed Labs: 60%, MOLE quizzes: 40%','Week 1Fri 11-12 LT5 lecture 1: Click Here to Kill EveryoneFri 12-2 DIA 2.02 lab 1Week 2Mon 9-11 DIA 2.02 lab 2Fri 11-12 LT5 lecture 2: Revolutionary Code: from MIT Printers to the ArduinoWeek 3Mon 9-11 DIA 2.02 lab 3Fri 11-12 LT5 lecture 3: Small but Perfectly Formed... Digging into the ESP32Week 4Mon 9-11 DIA 2.02 lab 4Fri 11-12 LT5 lecture 4: Country of the Blind: Networking Devices Without UIsWeek 5Mon 9-11 DIA 2.02 lab 5Fri 11-12 LT5 lecture 5: Sensing and respondingWeek 6 [reading week / assessment 1]Fri 1-3 DIA 2.02 [LAB ASSMT. 1]Week 7Mon 9-11 NC PC [MOLE quiz: mock]Fri 11-12 LT5 lecture 6: Connectivity and Provisionning: Joinme/WiFi, Sigfox, LoraWan and NB-IoTFri 12-2 DIA 2.02 lab 6Week 8Fri 11-12 LT5 lecture 7: unPhone Yourself — an IoT Projects PlatformFri 1-3 DIA 2.02 lab 7Week 9Mon 9-11 NC PC lab 8Fri 11-12 LT5 lecture 8: Projects QandAWeek 10Mon 9-11 DIA 2.02 lab 9Fri 11-12 LT5 lecture 9: WaterElves, Gripples and Fish Poo: IoT Case StudiesWeek 11Mon 9-11 NC PC lab 10Fri 11-12 LT5 lecture 10: IoT 2018: ReviewWeek 12 [exam / assessment 2]Mon 9-11 NC PC [MOLE quiz: EXAM]Fri 12-2 DIA 2.02 [LAB ASSMT. 2]','10 credits','During lab sessions and via mock exam.','Prof. Hamish Cunningham','com3505','The Internet of Things','By the end of the module, a student will be able to...summarise the history and development of the Internet of Things (IoT)analyse and evaluate competing approaches to IoT devices and platforms create an IoT device that operates within tight compute and cost constraints capture IoT device data in the cloud and analyse that data demonstrate a practical application of an IoT device','Autumn 2018/19','Low cost networked computers add eyes and ears (or sensors) and arms, legs and voices (or actuators) to the Internet. These devices are then connected to on-line \'brains\' (using big data, machine learning and analytics in the cloud). This field is called the Internet of Things (IoT). Will the result be a ‘world robot’?! No matter, in a world of many more devices than people, engineers who know how the new tech works and how to secure it will be in high demand. The com3505 module will cover the context and history of the IoT, the hardware, communications protocols and security systems it relies on, and the cloud-side analytics that make sense of the data produced. It will give practical hands-on experience of common IoT devices (sensors, actuators, microcontrollers), and look at a range of commercial platforms. Each student will be given an ESP32 wifi microcontroller and we will program live IoT applications using that device. Students will have the opportunity to use the Diamond electronics lab and the iForge project space to complete their own IoT device with a range of hardware and capabilities. Students should be aware that there are limited places available on this course.','One hour lecture each week and two hours labs, mainly based in the Diamond electronics lab.'),('This unit aims to make students aware of current web technologies, and to prepare for the future. The aim of the module is: to describe the main web technologies to teach how to critically analyse web solutions to develop students\' skills in designing and building solutions for the web to create original solutions to emerging web trends and needs','Coursework [100%]','Part I: Setting the Scene: A history of the Internet and the WebPresent and Future Web Part II: Web 1.0: Building static and dynamic pages HTML and XHTML JavascriptAccessing Web databases (e.g. mySQL)Client Server architectures client server architectures with NodeJS Part III: Web search Engines, Bots, and Directories Spidering the Web Anatomy of a search engine Part IV: Web 2.0 and beyond: Web 2.0 The basics of the social WebMajor Web 2.0 web sites and servicesUsing Web 2.0 APIs and services (e.g. Twitter, Facebook, Google Maps etc.)Capturing and using Collective Intelligence Part V: Conclusions','10 credits','Students will be given individual feedback on the first part of the assignment within three weeks of submission.','Dr. Vita Lanfranchi','com3517','Web Technologies','On completion of this course, students should: be able to recognize/identify current web technologies. be able to critically analyse web solutions and evaluate their appropriateness be able to understand and explain the basics of web searching and web crawling. be able to recognize and evaluate a number of state of the art web systems. understand and explain emerging web standards have a critical understanding of web 2.0 concepts be able to devise original solutions to emerging web trends and needs','Spring 2018/19','This course is concerned with getting acquainted with current Web technologies. We will read and discuss both teaching material and research papers. Topics will include:Technologies for creating static and dynamic Web pages (e.g. HTML, JavaScript)  Technologies for Web Databases (e.g. MySql)Methods for searching and mining the WWWWeb 2.0 concepts and technologiesClient Server Architectures.','Students learn the course matter through a mixture of lectures, tutorials and laboratories. Each week there will be 1 hour of lecture/tutorials and from the second week of semester, 2 hours of laboratory-based lesson.'),('This unit aims to:Develop students\' confidence in their ability to act independently in the execution of complex and important tasks; Develop the complex skills required to communicate difficult subjects in a variety of ways to pupils of widely varying abilities; Learn the specific skills required to develop projects and teaching methods that convey computer science concepts in an engaging way, and are appropriate to the age group of pupils under tuition; Provide a short, but direct, experience of teaching to those interested in pursuing it as a career.','Weekly diary (10%), end-of-module written report (35%), written account of special project (20%), oral presentation (20%), assessment by teacher moderated by module coordinator (15%).',NULL,'20','Students will receive written feedback on their special project, presentation and end-of-module report from the module leader. The school teacher will provide written feedback (and a mark moderated by the module leader) on the student’s achievements in the school, including the special project work.','Prof. Guy Brown','com3550','Undergraduate Ambassadors Scheme in computer Science','By the end of the unit, a candidate will have gained substantial experience of working in a challenging and unpredictable working environment. They will be able to assess and devise appropriate ways to communicate difficult concepts and will have gained a broad understanding of many of the key aspects of teaching in schools. They will also develop a better understanding of, and confidence in, their subject and their own abilities. They will either have acquired, or improved upon, abilities to:communicate effectively in general and with colleagues in particular; Improvise; Give and take feedback; Organize, prioritize and negotiate; Handle difficult and potentially disruptive situations; Speak effectively to an audience; Prepare lesson plans and teaching materials;Identify and understand the educational needs of others.','Academic Year 2018/19. Note that although the module runs over the whole academic year, the majority of the contact hours and assessment are in the Spring semester.','This module provides an opportunity for students to gain first-hand experience of computer science secondary education through a mentoring scheme with a teacher in a local school. Typically, each student will work with one class for half a day every week, for 10 weeks. The classes will vary from key stage 3 to sixth form. Students will be given a range of responsibilities from classroom assistant to the organisation and teaching of self-originated special projects. Only a limited number of places are available and students will be selected on the basis of their commitment and suitability for working in schools.','At the start of the Autumn semester, students will attend a one-day workshop (7 hours) on secondary school teaching led by a lecturer in the Division of Education. Students will attend two observation sessions/tutorials (4 hours) in schools in the Autumn semester, with an opportunity to discuss with the class teacher about communication, lesson planning and handling difficult situations. Tutorials with the module leader will take place in the university at regular intervals (6 hours). These will provide an opportunity to reflect on students\' experience in the school, review the plan for special project, share good practice and identify any difficulties that have arisen. These tutorials will be held as a group. An additional one-to-one tutorial will be held during an on-site visit to the school by the module leader (1 hour). Where possible, this will be targeted at the middle of the Spring semester so that the student’s progress can be reviewed. During work placements in schools in the Spring semester, students will work closely with a specific teacher who will help to develop the student’s role in the classroom. Initially the student will act as a classroom assistant; later, towards the end of the placement, the student will usually lead at least one teaching session (but the teacher will always be present). Students may also be involved in activities outside of formal classes, such as a computer club.Every student will undertake a special project. The choice of the project will be made following discussion with the teacher and with the module tutor. It will be targeted, where possible, at a specific concept or activity for which there is a perceived need in the school. The project may be a novel method of presentation appropriate to the topic, a particular demonstration, or a pupil activity, and is likely to involve the preparation of specific materials by the student. Students will be interviewed for a place on the module prior to the summer break. Successful students will then be DBS checked over the summer and paired with a school (and a specific teacher in that school). Hence, in week 1 of the Autumn semester students will know which school they are working with, and the age group they will be teaching.'),('This aims of this module are to: integrate further the material learned throughout the degree course, by applying it to a substantial open-ended problem; give the student the opportunity of bringing an individual piece of work, in a topic area of their own choosing, to completion; promote design and problem-solving skills, especially the ability to translate a theoretical approach into practice, overcoming any unexpected obstacles; promote academic presentation skills, especially those of technical report writing, visual and oral presentation and question handling; give the student the further opportunity to demonstrate and improve their personal skills, particularly those of time and work management.','Please note that it is expected that the underlying work for the project will be split evenly between the semesters. In particular, work is expected to continue at the end of the Autumn semester, after the interim report is submitted.Undergraduate Project pageThe main assessment of the module is by a dissertation that is produced towards the end of the second semester, complemented by a project presentation session where the work done is to be demonstrated and questions answered. If considered appropriate by the examiners, an oral examination may be held on this dissertation and project presentation.','The content of the project is typically selected by the student from a range of topics proposed by staff or industrial partners of the department. Students are also encouraged to propose their own topic, provided they can find a supervisor willing to supervise it and with the agreement of the Projects Officer.','40','Students will receive formative feedback on their interim report in a meeting with their supervisor, as well as during their regular meetings.','Project Supervisors','com3610','Dissertation Project','By the end of this course the students should: have increased their understanding of practical, experimental or theoretical approaches to tackling the research problem under investigation; have demonstrated an ability to evaluate critically and select from the different design solutions relevant to the research problem under investigation; have completed a major original piece of work in a systems design, or experimental area, based on the relevant background research literature; have prepared a project presentation and a research dissertation giving a survey of the literature, an analysis of the topic area, a detailed design and an evaluation of the project’s results; have demonstrated an ability to manage their own time effectively, undertake work on their own initiative and develop plans to progress the work further.','Academic Year 2018/19','In the individual research project, you will complete a major original piece of software design, or an experimental investigation.  This work will be reported formally in a research dissertation and also presented at a project presentation session, to which industrial representatives, students and academics are invited.  The work will include an Interim report that consists of an initial survey and literature review.  You will be engaged in a major piece of software development, or the design and execution of an empirical experiment.  You will have regular meetings with your supervisor, who will advise on any problems you encounter.  You will prepare an 7,000-14,000 word dissertation, which includes the material from the interim report, but also contains a complete design, implementation and evaluation of the results of your project.  This may be assessed by oral examination.','The student will have a personal supervisor and is expected to meet him/her regularly in order to discuss their progress and obtain advice on it. The rest of the work they are expected to plan and carry out independently.'),('to develop an understanding of the fundamentals of text processing; to acquire familiarity with techniques for handling text corpora; to develop an understanding of the basic problems and principles underlying text processing applications.','Formal examination [50%]. Coursework [50%].','Programming for text processing Linguistic backgroundText processing topics, such as: Information retrievalText compressionInformation ExtractionSentiment analysis','15','Students can discuss their lab exercise code during lab sessions. They will receive feedback comments on their marked assignment work later on in the term (prior to the exam).','Dr Mark Hepple and Prof. Rob Gaizauskas','com4115','Text Processing','By the end of this unit, a candidate should be able to: code in a programming language well-suited to text handling identify and explain key techniques that are relevant to performing a number of text processing tasks implement systems able to analyse large volumes of textual data, and to perform basic text processing tasks','Autumn 2018/19','This module introduces fundamental concepts and ideas in natural language text processing, covers techniques for handling text corpora, and examines representative systems that require the automated processing of large volumes of text. The course focuses on modern quantitative techniques for text analysis and explores important models for representing and acquiring information from texts. Students should be aware that there are limited places available on this course','There will be 2 lectures per week, with not more than 20 lectures overall. A third session will be available for lab classes or tutorials some weeks.'),('To raise students’ awareness of the different types of computer attacks and their effect on data privacy and business function To give students a grounding in the fundamental principles of data encoding/decoding and encryption/decryption; To give students a practical knowledge of how these technologies can be used to ensure better data security','Formal Examination [70%]; Coursework/MOLE Quizzes[30%]','Lectures will cover: Security FundamentalsAccess ControlCryptographic FoundationsSignatures and PKIsCrypto AttacksSecurity ProtocolsFormal Analysis of Security Protocols using Model CheckingApplication/Software SecurityThreat ModellingSecure ProgrammingSecurity TestingStatic code analysisSecure Operations and ForensicsThe lecture includes lab sessions that require an understanding of Linux systems and programming skills.','15','Students will receive feedback in the tutorial sessions in which solutions for the problem sheets are discussed as well as in the lab sessions.','Dr. Achim Brucker','com4501','- computer Security and Forensics','By the end of the unit, a candidate will understand: The complexity of the security landscape;The potential vulnerabilities associated with authentication;The advantages and disadvantages of encryption and decryption techniques; The vulnerabilities of wired and wireless networks. They will have demonstrated: A detailed understanding of industrially relevant issues relating to computer security and forensics. The ability to present material in a concise yet comprehensive manner, and to target that material appropriately to the audience in question','Spring 2018/19','This module provides, in general, an introduction into computer security and forensics. In particular, this module focuses on approaches and techniques for building secure systems and for the secure operation of systems.The module complements the mathematics module MAS345 and requires a solid understanding of mathematical concepts (e.g., modulo-arithmetic, complex numbers, group theory) and logic (set theory, predicate logic, natural deduction) as, e.g., taught in the modules com365, com1001, and com2003). Moreover, the module requires a solid understanding of a programming language (e.g., Java, Ruby or C), basic software engineering knowledge and an understanding of database and Web systems, as, e.g., taught in the modules com1003, com1008, com1009, com2001, com6471, and com6102). The lab sessions require a basic command of Linux in general and the command line (shell) in particular. Students should be aware that there are limited places available on this course','Lectures and some practical work.'),('to describe speech production and perception in humans; to teach computational techniques for analysing speech signals.','2 programming assignments (introductory exercise - 10%, main exercise - 45%, total - 55%) 2 Invigilated MOLE quizzes (MOLE quiz 1 - 20%, MOLE quiz 2 - 25%, total - 45%)','Half of the course is devoted to the nature of speech and half to speech signal processing. Topics covered include: speaking, hearing, sounds and symbols, articulatory and acoustic phonetics, phonology, prosody, speech spectra, sampling, fourier transform, linear filters, linear prediction cepstral analysis.','15','Feedback will be provided by: Verbal interaction during lecturescomments attached to the marks given to the formal assignments.','Prof. Roger Moore','com4502','Speech Processing','By the end of the unit, a student will have acquired: an understanding of the basic mechanisms of speech production and perception; familiarity with acoustic-phonetic descriptions of the speech signal; an understanding of analysis techniques; an ability to implement speech analysis algorithms; basic knowledge of discrete-time signal processing;','Autumn 2018/19','This module aims to demonstrate why computer speech processing is an important and difficult problem, to investigate the representation of speech in the articulatory, acoustic and auditory domains, and to illustrate computational approaches to speech parameter extraction. It examines both the production and perception of speech, taking a multi-disciplinary approach (drawing on linguistics, phonetics, psychoacoustics, etc.). It introduces sufficient digital signal processing (linear systems theory, Fourier transforms) to motivate speech parameter extraction techniques (e.g. pitch and formant tracking). Students should be aware that there are limited places available on this course.','Lectures and scheduled access to a Laboratory for practical work'),('The aims of this module are: to provide a comprehensive theoretical and practical approach to the foundation topics in three-dimensional computer graphics; and to make use of a graphics API (application programming interface) for the construction of 3D computer graphics software','Formal examination (2 hours) [40%] Two assignments: Programming assignment and an individual, focussed study on one topic from the module [60%].','Coordinate systems and transformations [2 lectures] Building and Representing Objects [ 3 lectures ] The graphics pipeline [ 1 lecture ] Rendering [ 3 lectures ] Incremental shading Hidden surface removal The Z-buffer Anti-aliasing Simulating 3D Reality [ 7 lectures ] Simple light object interaction Textures and shadows Advanced light object interaction computer Animation [ 3 lectures ] Review [1 lecture]','15','Ongoing during lab sessions, via online help and in office hours; Final feedback sheet for the assignment','Dr Steve Maddock','com4503','3D computer Graphics','By the end of this course the students should: be able to use matrices to transform (hierarchical) objects in 3D coordinate systems; be able to describe and apply a 3D viewing pipeline to display data-structured objects, modelled in a world of real numbers, on a discrete, raster screen device; be able to reason about the most suitable modelling techniques to use for particular real-world applications; be able to implement standard 3D shading and rendering techniques using a library of graphics routines; understand and be able to describe and discuss a range of techniques for increasing the realism of rendered scenes; understand and be able to compare and contrast advanced rendering techniques; be able to describe and discuss a range of computer animation techniques; understand and be able to implement a range of three-dimensional computer graphics algorithms; be able to describe how computer graphics techniques are used in a variety of application areas, such as in the entertainment industry.','Autumn 2018/19','This module is an introduction to the techniques used in modern 3D computer graphics. It deals with fundamental techniques that are the basis of work in a range of industries, e.g. entertainment and computer-aided design. Both basic and advanced topics concerned with the production of images of abstract 3D objects are covered, including: 3D representations and manipulations in graphics, light reflection models, realism techniques such as shadows and textures, ray tracing and 3D animation. Students should be aware that there are limited places available on this course.','In addition to the formal lectures, there will be approximately 10 hours of practical sessions related to learning OpenGL, as well as online help with the assignment work'),('to present the human and technological issues involved in building safe complex software to introduce the role of standards in the development of safety critical systems; to explain how human factors relate to systems safety and how they must be considered in system design; to introduce the notations and specialised programming languages used for construction of safety critical software; to provide an understanding of the software engineering concepts that are specific to safety critical systems; to examine in detail a range of methods for testing software, and the contributions that they can make to achieving goals for the quality of software.','Coursework [30%]2 MOLE Quizzes [40%] Lab portfolio [30%]','The nature of safety-critical systems and softwareSafety management: hazards, risks, risk assessment, and reduction, software reliabilityFinite-state machine models and predicatesSoftware engineering lifecycles, processes and activities, the role of verification and validation.Specifying control systems Introduction to testing: forms of testing and approaches to itTest methods and derivation of test casesHazard analysis, HazOp and FMEA Programming practices for safety-critical software.','15','Will be provided in problem-solving classes.','Dr Neil Walkinshaw','com4506','Testing and Verification in Safety-Critical Systems','By the end of this unit, students will: Have an overall appreciation of systems and software safety, hazard analysis and the approach to engineering safe systems. Understand the concept of SILs (safety integrity levels) and the principles of the IEC61508 standard. Understand a range of specific human-computer interaction issues as applied to safety-critical systems. Be familiar with specification languages, and be able to use them to construct specifications of appropriate simple systems. Understand the limitations that must be introduced into conventional programming languages when developing software to be used in safety-critical systems. Understand the software lifecycle and its relationship to the development of safety-critical systems. Be able to apply advanced software testing methods to test generation.','Autumn 2018/19','This module provides an introduction to the processes and problems of building complex software such as for use in aerospace applications. Topics covered can be split into four major groups: safety, specification languages, concepts of software engineering, different methods of software testing. A substantial amount of time will be spent on the ideas of software testing and specific testing techniques. Safety includes software and systems safety, methods of performing hazard analysis, human factors and the IEC 61508 standard. Specification languages such as Statecharts. Software engineering concepts focus on the software lifecycle, safe language subsets, software testing and maintenance. The software testing part covers advanced approaches to generating software tests. Students should be aware that there are limited places available on this course.','Lectures will explain the basic theoretical concepts and their applications. Problem solving and examples classes, together with the associated private study and the preparation for the coursework assignment, will give students the opportunity to develop their understanding of the concepts and their practical skills in the development of elements of safety-critical software.'),('To develop an understanding of hardware design and protocol verification by model checking as well as program verification by formalisms such as Hoare logics and separation logic To study model checking concepts such as temporal logic formulas, state space, reachability algorithms, automata theory, BDD algorithms, principles of hardware verification, and examine case studies with Promela and SPIN. To study program development and verification concepts like: assertions (pre- and post-conditions, invariants), Hoare logics and simple programming constructs, partial and total correctness, separation logic To discuss current research topics in hardware and software verification.','Exam 100%','Week 1: Introduction and automata-theoretic background Week 2-5: Automata-based and symbolic model checking (linear temporal logic, Buchi automata, BDDs, model checking algorithms) Week 6-10: Program verification based on theorem proving (Hoare logic, partial and total correctness semantics, interactive theorem proving, refinement, separation logic)','15','Weekly feedback is provided in the exercise/tutorial sessions.','Prof. Georg Struth','com4507','Software and Hardware Verification','By the end of this module, a candidate will be able to Understand the fundamental theory underlying hardware and software verification Appreciate the scope, potential and limitations of hardware and software specification and verification Be able to construct formal specifications for hardware and software systems, develop appropriate verification mechanisms and algorithms Utilise adequate tools and languages to formally verify hardware and software systems Develop his/her capacity to specify, analyse, verify and reason about different computing systems Have an understanding of current hardware and software verification research problems and topics','Spring 2018/19','This module introduces state-of-the-art software and hardware verification techniques which nowadays are widely used in industry. They are particularly important in safety-critical applications, where system failures can not be tolerated. Designing high quality dependable computing systems is widely believed to be the main challenge in computer science. Particular focus is on protocol verification and hardware design verification by model checking and program verification by formalisms such as Hoare logics. These techniques presume formal system specifications and use automated tools for analysing whether a system satisfies the properties required or imposed. Students should be aware that there are limited places available on this course.','2 formal lectures plus 1 exercise/tutorial session per week.'),('This unit aims to provide a deep understanding of the fundamental technologies underlying modern artificial intelligence. In particular it will provide foundational understanding of data science, probability in artificial intelligence.','50% Formal examination 50% Coursework, consisting of weekly lab classes and MCQ.','Probability theory Objective functionLinear regression Basis functionsGeneralisationBayesian regression Unsupervised learningProbabilistic ClassificationLogistic Regression and Generalised Linear ModelsOther topics','15','Students will receive feedback on their assignments in lab sessions.','Dr Mauricio Alvarez and Dr Haiping Lu','com4509','Machine Learning and Adaptive Intelligence','By the end of the unit, a candidate will be able to demonstrate the ability to understand of probability theory and how it relates to uncertainty in modern artificial intelligence, understand when and how to implement the appropriate learning paradigm for a given application, have a deep understanding (including how to implement) of a range of supervised learning algorithms. Potential examples include: linear regression, linear classification, naive Bayesian classification, principal component analysis, k-means clustering, decision trees. have a broad overview and basis for understanding more complex technologies, such as: the support vector machine, kernel methods, probabilistic graphical models, E-M algorithms, factor analysis, nonparametric Bayesian methods.','Autumn 2018/19','The module is about core technologies underpinning modern artificial intelligence. The module will introduce statistical machine learning and probabilistic modelling and their application to describing real world phenomena. The module will give students a grounding in modern state of the art algorithms that allow modern computer systems to learn from data.','There will be 10 hours of formal lectures and 20 hours of lab classes. These classes may involve computer based problem solving, examples and MCQ. The lectures and example classes will run concurrently, covering similar topics, with theory being laid out in the lectures, and application of the theory taking place in example classes.'),('to develop an understanding of the software architecture underlying modern mobile devices to develop an understanding of how design patterns are used in software frameworks for mobile devices to develop skills in object-oriented programming to develop skills in team working to develop an understanding of usability in mobile applications to develop an understanding of how to process data in a mobile applicationto develop an understanding of how to access programmatically and use efficiently a phone\'s sensorsto develop an understanding of how to optimise the performance of mobile applications softwareto develop skills in implementing mobile software applications that use text and touch input','Coursework [100%]. Students will plan, design and develop an Android application, working in groups.','Introduction to mobile computingHow to design a mobile appAndroid frameworkTools and development environmentsApp lifecycleViews and layoutsSensorsPersistence and databasesCreating background services','15','Feedback on solutions to laboratory exercise sheets, throughout the semester Feedback on interim and final stages of the project work','Prof. Fabio Ciravegna','com4510','Software Development for Mobile Devices','By the end of the unit, a candidate will be able to: Understand the software architecture of a modern mobile device Understand how design patterns such as model-view-controller are used in software frameworks for mobile devices Implement mobile software applications that use text and touch input as well as using input from sensors Understand the importance of usability in mobile applications and know best practices in implementing mobile apps Understand the important role of navigation in mobile application design, and be able to write an application that is easily navigable Understand how to optimise performance of a mobile device application and use threading Understand how to work effectively as part of a programming team Understand how to store data in a mobile applicationKnow the basics of Android, having developed a reasonably sized project.','Autumn 2018/19','This module aims to provide a thorough grounding in the principles of software development for mobile devices. The Android platform will be used as an example, although the modules emphasizes general principles that are common across all mobile platforms. An important aim of the module is to demonstrate the real-world application of object-oriented programming principles and design patterns in software for mobile devices. Students undertake a substantial software implementation project, working in pairs. The module will be taught primarily using Java and Swift languages.PLEASE NOTE THE CONTENT OF THE COURSE HAS CHANGED comPARED TO LAST YEAR. Students should be aware that there are limited places available on this course.','There will be 1 lecture a week in a lecture theatre, and 2 hours of lab-based lecture. Lectures provide the basic technical material that students need to be able to understand. Programming is a practical skill, so the lectures are supplemented with lab-based classes in which specific technical topics are thought and applied. These classes support the development of practical programming skills.'),('to teach the principles and application of speech technology, covering speech recognition and synthesis to provide experience in building and using speech technology devices.','Formal examination (2 hours) [70%] Coursework [30%]','Introduction to speech technologyPattern processing fundamentals for speechHidden Markov Models and Deep Neural Networks for speech processingTowards a state-of-the-art ASR SystemAcoustic modellingLanguage modellingSearchAdaptationSpeech recognition application examplesSpeaker identificationSpeech synthesis','15','Students will receive feedback in the weekly practical sessions.','Prof. T Hain','com4511','Speech Technology','By the end of this course the students should: appreciate the difficulties of machine perception in general and speech perception in particular; understand the prevailing techniques for acoustic modelling and language modelling in automatic speech recognition; have seen how these techniques are deployed in spoken language systems; appreciate the difficulties of producing synthetic speech and understand the principles of speech synthesisers and text-to-speech systems; andhave experience in implementing and assessing a speech technology device.','Spring 2018/19','This module introduces the principles of the emergent field of speech technology, studies typical applications of these principles and assesses the state of the art in this area. Students will learn the prevailing techniques of automatic speech recognition (based on statistical modelling); will see how speech synthesis and text-to-speech methods are deployed in spoken language systems; and will discuss the current limitations of such devices. The module will include project work involving the implementation and assessment of a speech technology device. Students should be aware that there are limited places available on this course.','Two formal lectures and a one hour practical session per week, for 10 weeks. Practical work will consist of a project involving the implementation and assessment of a speech technology device. This will include some programming.'),('to give students a well-rounded feel for the problems and approaches of Statistical Natural Language Processing (NLP) to give students an understanding of the potential areas of application of the techniques developed in Statistical NLP','The course will be assessed by lab assignments (40%) in addition to a formal examination (60%) at the end of the semester. Lab assignments will be completed individually and involve a mixture of routine tasks and open ended problems.','Lectures will provide an overview of the field of NLP and its sub-areas, and will introduce and explain its key techniques, including their applicability and limitations. In lab classes, students will practice implementing the NLP techniques taught in class, testing their code in application to real language data. Topics covered will include: N-gram Language Modelling Word Classes and Part-of-Speech Tagging Lexical Semantics, Word Sense Disambiguation and Lexical SimilaritySyntactic and semantic parsingInformation extraction Neural network architectures for NLP','15','Problem sheets will be set during labs sessions and then will discussed in labs and/or lectures. Verbal interaction during lectures.','Dr Nikolaos Aletras','com4513','Natural Language Processing','By the end of this course the students should: be able to describe and discuss the subareas of NLP be able to implement NLP algorithms and techniques; be able to describe and discuss the potential and limitations of NLP techniques for applications such as machine translation, question answering, information retrieval and information extraction','Spring 2018/19','This module provides an introduction to the field of computer processing of written natural language, known as Natural Language Processing (NLP). We will cover standard theories, models and algorithms, discuss competing solutions to problems, describe example systems and applications, and highlight areas of open research. Students should be aware that there are limited places available on this course.','There will be 2 formal lectures and 1 lab session per week.'),('To introduce a statistical analysis of computer networks To show how queuing theory can be used to analyse computer networksTo show the applications of queuing theory to other areas of science and engineering','Formal examination (2 hours) [100%]','Review material: Networking Introduction. Random processes and probability theory. A simple network queue: M/M/1 queue Birth death processes Little\'s formulaRicher queueing models: M/M/?. Erlang delay. Erlang loss system. Erlang B and C curves. M/G/1. Overview of Simulation: Sampling theory. Obtaining samples from Markov chains.','15','Problem sheets are are set and discussed in class and this provides an opportunity for feedback.','Dr Joab Winkler','com4515','Network Performance Analysis','By the end of the unit the candidate should be able to: Analyse queuing networks and their application to computer networks Show how to design a computer network so that the queues are within specified bounds Appreciate the importance of queuing theory to other areas of engineering','Spring 2018/19','This module considers the performance of computer networks from a statistical aspect, using queuing theory. It is shown that the performance of a computer network depends heavily on the traffic flow in the network, and different models of traffic and queues are used. These include single-server queues, multiple server queues, and the concept of blocking is discussed. Although the analysis is entirely statistical, all the relevant background is provided in the lectures, such that the course is entirely self-contained. Problem sheets are provided in order to assist the students with the course material. Students should be aware that there are limited places available on this course.','The teaching method is by lectures with numerous example and problem sheets so that the students have a good theoretical and practical understanding of the subject. 16 Hours of formal lectures. 3 Hours of tutorials. 4 Hours of Lab classes. 4 Hours of tutorial support classes.'),('This unit aims to... 	develop an understanding of cloud computing at the infrastructure, platform and software service levels and articulate why it is an attractive paradigm for business;develop the practical skills necessary to solve technical problems in order to design, develop and deploy software services on a cloud platform, and to integrate services with related services in a software service ecosystem;develop the personal and technical skills necessary to work productively as part of a team, delivering a large software project to staged deadlines, and to evaluate the work of other teams.','100% coursework consisting of a team interim report, a team final report accompanying the delivered software and an individual evaluation questionnaire.','What is cloud computing?The business case for the cloud;Cloud service models (IaaS, PaaS, SaaS);Cloud platforms, eg Azure, OpenStack, Heroku;Web services and internet protocols;Java servlets and servlet containers;Java presentation tier technologies;SQL and NoSQL data storage options;Service-oriented architectures;Message queues and brokers;Quality, pricing and service level agreements;Security in the cloud;Cloud service ecosystems','15','Students get verbal feedback from the lecturer in response to their questions about designing a cloud platform and software services. Student teams receive the marked interim report back within 2-3 weeks of the submission deadline with strong feedback on what is good/poor about their suggested design.  Student teams receive peer feedback on the quality of their final systems, after completing the automated testing questionnaire, and receive feedback on their final report, in terms of a checked list of features on the coversheet.  The class receives email feedback from the lecturer covering the main points done well and less well.','Dr Anthony Simons','com4519','Cloud computing','By the end of the unit, a candidate will...understand the difference between elastic, virtualised cloud computing and other kinds of Internet-enabled distributed computing, or map-reduce grid computing;understand the architecture of the cloud stack, including the infrastructure-, platform-, and software-as-a-service levels, and be familiar with major providers of these offerings;understand the choice of database engine underlying a cloud software service, including deep storage, block storage, key-value storage and relational storage;understand the choice of technologies used to connect cloud software services, including message queueing services and publish-subscribe models;understand contracts in the cloud, including subscription and metered usage payment models, and monitoring service-level agreements for adaptation and recovery;understand the rapidly developing range of technologies involved in constructing software services, such as Java, Go, PHP, Python, Ruby, XML, JSON and SQL;understand the range of technologies involved in delivering web-based software services, such as WSDL and SOAP, REST, JSON and XML, or rich-client applications with AJAX;understand the architectural components involved in hosting a web-based software service, such as web-servers, application-servers, database servers and client machines;have collaborated in a team to design and develop a novel software service, as part of a wider software service ecosystem;have deployed their team’s software service to a cloud platform, taking issues such as security, scalability and load-balancing into account;have published their team’s software service in some internet-enabled registry and repository system, so that it is accessible by other teams;have evaluated the work of another team against the project requirements;have worked productively in a team, either as manager or delegate with responsibilities to the rest of the team.','Spring 2018/19','Cloud computing offers virtual, scalable, shared computing resources via a network, as a utility service. This module introduces the concepts of cloud computing, explaining why business is moving to this model, and teaches the technologies involved in developing a platform-as-a-service offered via the cloud. It focuses on Linux and Java servlet programming technologies for developing software service ecosystems. Students should be aware that there are limited places available on this course.','The teaching method is by lectures, supported by laboratory classes where students may engage with the various technologies under supervision before completing their group project.'),('The aim of the Darwin project is to give students at advanced undergraduate and masters level insight into the research process. The objective of the module is for students to learn how to apply scientific research methodology to a small group research project.','Coursework [100%]','The content is determined by the research projects. Students have to research the relevant literature, plan the research work, implement and experiment, write reports, papers and give presentations to experience a complete research cycle.','30','The students will receive immediate feedback during lab sessions and in presentations. Project supervisors will give detailed feedback in weekly supervision and on submitted reports.','Dr Dawn Walker','com4520','Darwin Project','By the end of the unit, a candidate will ... have a very good understanding of the process of conducting research;be able to conduct a complete and concise literature review of the topic area; be able to form a research proposal and attempt to solve it based on a thorough understanding of a topic area; be able to write a journal quality scientific paper; be able to present research orally; understand the process of working within a team.','Academic Year 2018/19','The Darwin research project provides the opportunity for students to engage in a substantial piece of research work. It is undertaken in groups. Unlike the individual project, it is not primarily concerned with software development, although software development may be involved as part of the process of carrying out the research, for instance to construct the \'experimental apparatus\' required for it. Projects are suggested and supervised by Department of computer Science staff. Students form groups and choose a project which interests them (subject to numbers of students registered), then refine the scope of the research by conducting a thorough analysis of the topic area and formulating a solution also with the help of their supervisor. The project is developed under strong supervision and appropriate interim reports are produced and presented. The project culminates with the production of a publication of the research finding and a full report of the work carried out, as well a final conference style presentation.','The course begins with a number of lectures/lab sessions outlining how research projects are conducted and the resources available to students. The latter include: Linux, the Emacs text editor, LaTeX, MATLAB, scripting languages and collaborative tools (wikis, SVN, git, blogs).Group Meetings. From week 6, each group will meet the project supervisor for a full hour every week. These meetings are for the group to report to the project supervisor on progress so far, and to allow the supervisor to provide feedback on progress. These meetings should be minuted and those minutes should be available through the project wiki. Project milestones and interim deliverables will also be discussed or modified. Bi-weekly reports will be submitted at every other meeting and reviewed by the supervisor. These reports will reflect individual contributions to the main project and any particular sub-tasks an individual may have carried out.'),('To introduce modern accelerator architectures, explain the difference between data and task parallelism and raise awareness into how the practical and theoretical performance of architectures differs. To give practical knowledge of how GPU programs operate and how they can be utilised for high performance applications.To develop an understanding of the importance of benchmarking and profiling in order to recognise factors limiting performance and to address these through optimisation.','80% for project assignment of which 40% is for the delivery of course work (code) and 40% is for written report describing methods and techniquesTwo 10% multiple choice quizzes.','Introduction to accelerated computingIntroduction to programming in CPointer and MemoryOptimising C programsMulti core programming with OpenMPIntroduction to Accelerated computingIntroduction to CUDAGPU memory systemsCaching and Shared MemorySynchronisation and AtomicsParallel PrimitivesAsynchronous programmingProfiling and Optimisation of GPU programs','15','Students will receive continuous feedback from lab sessions and Google discussion groups. Feedback will also be given on marked quiz assignments and for the main assignment.','Dr Mozhgan Kabiri-Chimeh','com4521','Parallel computing with Graphical Processing Units (GPUs)','By the end of this course students will be able to: Understand how to write C programs and manage memory allocation manually.Utilise OpenMP to write programs for multi core architectures to improve code performance.Be able to describe and discuss performance techniques for multi core processors.Program GPUs for general purpose use with the CUDA language.Appreciate how GPU program performance can be improved through intelligent caching.Appreciate the scope, potential and limitations of accelerators for improving code performance.Benchmark and profile GPU programs.Identify limiting factors to code performance and address these through architecture specific optimisation techniques.Recognise and understand the importance of parallel primitives (such as scan and reduce) and understand how these can be implemented with data parallelism.','Spring 2018/19','Accelerator architectures are discrete processing units which supplement a base processor with the objective of providing advanced performance at lower energy cost. Performance is gained by a design which favours a high number of parallel compute cores at the expense of imposing significant software challenges. This module looks at accelerated computing from multi-core CPUs to GPU accelerators with many TFlops of theoretical performance. The module will give insight into how to write high performance code with specific emphasis on GPU programming with NVIDIA CUDA GPUs. A key aspect of the module will be understanding what the implications of program code are on the underlying hardware so that it can be optimised. Students should be aware that there are limited places available on this course.','Weekly lectures will introduce students to the background on CPU and GPU architectures and programming techniques. Lectures will highlight key design principles for parallel and GPU programming to give students the necessary insight to be able to constructively look at problems and understand the implications of parallel computing. Lab sessions will facilitate hands on learning of practical skills through targeted exercises'),('This module aims to:Give students experience of working in a team in a professional software engineering environmentRaise students\' awareness, abilities and knowledge relating to the activities involved in the creation of a business model and the development of a software applicationProvide students with experience of creating a business model and developing a software application for real customers, using agile software engineering and lean startup practices','20% individual assessment (breadth of knowledge tests, reflections on performance, and involvement as a customer in com1001). 80% team assessment (presentations, and a project, with peer review). This module has the explicit objective of developing teamwork skills. Participation in teamwork is mandatory and absence will result in deduction of marks and eventually loss of credits.','The precise experience of students will depend on the nature of their customers/project, but will always involve using Ruby on Rails to develop a web application whilst exploring the following topics: Coding (architecture, pair programming, refactoring, standards) Design (mockups, parallel prototyping, personas) Lean Startup (business models, customer research, landing pages, metrics)Process (Agile, burnup charts, continuous delivery, Kanban, planning, process improvement, retrospectives, risk management, Scrum) Quality (accessibility, error handling, performance, reliability, security, user experience) Requirements (acceptance criteria, estimation, prioritisation, proposals, story mapping, user stories, value statements) Testing (automated testing, manual testing, test driven development)','45','Students will meet weekly as a team with their mentor to discuss their progress and plans. The mentor will offer feedback and guidance, and encourage the students to be proactive in developing their knowledge and skills in appropriate areas. Student will be required to provide draft submissions for elements of their team project throughout each semester so that mentors are able to review these. Students will hold regular retrospectives as a team where they will review their own practices and identify opportunities for improvement. Mentors will facilitate and/or observe these retrospectives as needed to ensure they are effective, and offer feedback and guidance to students on their facilitation of and participation in retrospectives. At the end of each breadth of knowledge test a score will be provided in the online learning environment. Following this, explanatory comments will be emailed for the questions that are most frequently answered incorrectly by the cohort.Following the end of each semester, students will be emailed both team and individual marks and feedback sheets. These will include marks and explanatory comments for appropriate activities as described in the module mark scheme. Much of the feedback and guidance provided will relate to the performance of the team (which accounts for 80% of the assessment) rather than the individual. However, individual feedback and guidance will also be provided where issues are highlighted in peer reviews or where mentors have specific observations.','Chirs Murray (module co-ordinator), Ryan Bibby, Chrissie Elliott, James Gregory, Harriet Holman, Dr Phil McMinn, Lauren O\'Hara, Andrew Stratton','com4525','Genesys','By the end of the module, students will be able to: Explain the organisational and technical issues that underlie the development of a software applicationApply lean startup practices to create a business modelApply agile software engineering practices, and make use of industrial tools, during the development of a software applicationIdentify valuable requirements by having conversations with, and gaining feedback from, customers and stakeholdersDesign usable web applications that demonstrate an awareness of user needsFacilitate the prioritisation of requirements by collecting and interpreting appropriate dataBuild and release maintainable, secure and robust web applications using Ruby on RailsCritically reflect on performance as an individual, and as a team, and adapt behaviours and process appropriatelycompare and appraise a range of software development practices and methodologies in the context of the Agile ManifestoCreate a successful software application as part of a team','Academic Year 2018/19','This module involves students working with real customers and solving genuine problems, using agile software engineering and lean startup practices. Students work in teams to develop web applications as part of Genesys, supported by staff from epiGenesys.','During the year students will work in teams to create and release a web application which provides value to real customers. In the first 5 weeks of each semester training will be provided in a flipped classroom style. Students will study material in the online learning environment and attend training sessions, whilst also working on their team project. For the remainder of each semester students will continue to work on their project. Students are expected to be proactive in developing their knowledge and skills, using the training as a foundation and seeking guidance from their mentor as needed In both semesters students will act as customers in com1001, where they will gain insight into the experience of customers during the development of a software application. Students will be expected to engage with this process and apply the understanding they gain to improve interactions with their Genesys customers.'),('to extend mathematical and computational skills; to introduce the notion of a dynamical system; to provide knowledge and understanding of the techniques used for constructing differential equation models of dynamical systems, including their limitations; to provide knowledge of numerical schemes for the simulation of differential equations; to provide practical knowledge of the use of MATLAB for simulating differential equations; to provide knowledge and understanding of the concepts used for constructing individual based models of dynamical systems, including their advantages and limitations; to provide practical knowledge of the use of MATLAB (or Python) for simulating agent-based models; to introduce the application of differential equation and individual-based models to biological systems; to provide a grounding for units at higher levels involving dynamical systems.to provide experience in developing interdisciplinary teamwork skills.','35% formal exam 30% group assignment 35% individual assignment','The main focus of the module will be on the use of differential equations and individual based models to simulate the behaviour of natural systems. A number of specific topics will be introduced that will be updated to reflect recent developments, e.g. population dynamicsphysiological processes','15','Students will receive feedback via a feedback session held in the respective lecturer\'s office for whoever would like to see their assignments.','Prof. Eleni Vasilaki and Dr Dawn Walker','com6009','Modelling and Simulation of Natural Systems','By the end of this course the students should be able to demonstrate: a good understanding of the notion of a dynamical system and an ability to develop differential equation models of simple dynamical systems; knowledge of numerical schemes appropriate for different types of differential equation model (e.g. boundary and initial value ordinary differential equations); knowledge of the basic concepts behind the construction of individual based models of dynamical systems an ability to develop and implement code in MATLAB for the numerical solution of differential equation and individual-based models, and visualisation of solutions; an understanding of the use of the different modeling paradigms in the simulation of simple biological systems, and an appreciation of the benefits and limitations of each approachability to work productively in a team with members from different academic backgrounds.','Spring 2018/19','This unit will provide a practical introduction to techniques used for modelling and simulating dynamic natural systems. Many natural systems can be modelled appropriately using differential equations, or individual based methods. In this unit, students will explore and understand both modelling approaches. They will gain knowledge of the assumptions underlying these models, their limitations, and how they are derived. Students will learn how to use MATLAB to simulate and explore the dynamics of computational models, using a variety of examples drawn from both natural systems. Students should be aware that there are limited places available on this course.','The course will consist of two 50 minute sessions per week, either lectures or computer practicals, with an additional 50 minutes tutorial or self organised group meeting'),('to offer an insight into the more practical aspects of the taught modules and','There are no written examinations for this module. Assessment is entirely on the basis of the deliverables produced during the project.','Group project work, including implementation of a substantial piece of software.','20','Students receive feedback in the tutorial sessions which follow each deliverable deadline. Students are encouraged (particularly in semester 2) to view each tutorial session as an opportunity to receive advice and feedback on any and all aspects of the MAXI. This includes team working, project planning and management, as well was the direct project outputs. Feedback on deliverables is given both orally and as annotations to documents which are returned. Other feedback is given orally or as appropriate.','John Stovin','com6011','Maxi Project','to provide students with experience of working in teams.','Academic Year 2017/18','The MAXI project is a group project which begins in the Autumn Semester and continues through the Spring Semester.','The skills necessary for this sort of group work, which play a critical role in commercial software development, can most effectively be learnt by experience. The MAXI project is based around a client, who has a real problem to be solved. Students are split into teams of about five people, who work cooperatively on the analysis, design, implementation and testing of the client\'s software. It is managed by an experienced professional software consultant (Mr John Stovin) rather than by a member of the academic staff.'),('This unit aims to to provide a deeper understanding of the fundamental technologies underlying data analytics at scale. In particular it will provide advanced understanding ofadvanced understanding of parallelization of algorithms and algorithmic approaches such as stochastic gradient descentpractical skills relating to the deployment of scalable ML','Coursework (100%).','IntroductionSpark overview Scala programmingSpark and HPCSpark DataFrame/datasetCluster computingMachine learning pipelineParallelization and optimization in SparkParallelizationOptimizationDecision trees Scalable decision trees and applications Scalable logistic regression and applications Scalable GLM and applications Scalable PCA for dimensionality reduction and applications Scalable KMeans clustering and applications Scalable matrix factorization for collaborative filtering and applications','15','Immediately for exercises in laboratory classes. After each coursework stage through debriefing lecture and individual marking.','Dr Mauricio Alvarez and Dr Haiping Lu','com6012','Scalable Machine Learning','By the end of the unit, a student will be able tounderstand the theoretical issues and wider context relating to ML at scaleunderstand practical parallelization of algorithms and algorithmic approaches using such techniques as stochastic gradient descent;deploy a practical implementation of ML at scale, using SPARK, FLINK, and programming languages such as Scala;understand the wider context of deployment onto elastic computing structures, cloud computing and/or GPUs.','Spring 2018/19','This module will focus on technologies and algorithms that can be applied to data at a very large scale (e.g. population level). From a theoretical perspective it will focus on parallelization of algorithms and algorithmic approaches such as stochastic gradient descent. There will also be a significant practical element to the module that will focus on approaches to deploying scalable ML in practice such as SPARK, FLINK, programming languages such as Scala and deployment on elastic computing structures, cloud computing and/or GPUs.','Lectures, laboratory classes.'),('This unit aims to: A1 develop the student\'s research skills in the context of a challenging problem of their own choice. The topic will combine aspects ofcybersecurity and AI A2 develop the student\'s advanced technical knowledge and skills in the areas relevant to the project A3 develop the student\'s professional skills and contextual knowledge (e.g. social, ethical, and legal considerations A4 develop the student\'s written and oral presentation skills A5 develop the student\'s ability to receive criticism and engage in constructive discussions about their work.','90% coursework [LO1-LO8],10% presentation of early stage survey and plan presentation [LO1, LO2, LO3]','The content of the project is typically selected by the student from a range of topics proposed by the staff or industrial partners of the department. Students are also encouraged to propose their own topic, provided they can find a supervisor willing to supervise it and with the agreement of the Projects Officer.','60','Assignments marked using published criteria, submission commented and returned by MOLE within 3 weeks. Students will meet with their supervisors regularly (and, where relevant, external clients) to discuss progress and problems encountered,and to review issues that arise during the project.','Various','com6013','Cybersecurity and AI Dissertation Project','By the end of the unit, a candidate will be able to:LO1 research the background to a challenging research problem at the interface of cybersecurity and artificial intelligence. Specifically:a) survey relevant literature and comment critically on itb) identify/confirm an original and challenging research question (or questions) to be addressed and appreciate the feasibility of doing sowithin the time available on the project; LO2 plan, monitor and possibly re-plan work according to progress made;LO3 identify what needs to be done to answer the research question(s), and to identify appropriate approaches and techniques to be used todevelop the solution (i.e. identify an appropriate methodology). This is solution \'synthesis\'. It includes developing understanding of the capabilities of available resources (such as tools and techniques) andwhether they suffice to underpin a solution as well as the identification of a specific solution path. Note: methodology must take intoaccount ethics and other contextual considerations. LO4 demonstrate competence in using appropriate solution tools; LO5 evaluate work done in an appropriately rigorous manner and use the results to draw appropriate conclusions or inform further work.This will include, for example, identification of evaluation criteria, testing or analysis of artefacts developed (e.g. software), demonstration ofreasonable experimental practices, critical review of assumptions made, appreciation of threats to validity, drawing evidenced conclusions, and identification of future work; LO6 demonstrate an appreciation of the professional, social, ethical, legal and other contextual considerations that apply to the work theyhave done. Note the area of Cybersecurity and AI is at the confluence of two topics that raise interesting contextual issues in their ownright. The MSc in predominantly \'technical\' in nature but we do require an appreciation of wider issues; LO7 to document work carried out in a form suitable for a technically able but not necessarily specialist audience. For working purposes thereader will generally be a computer scientist but not necessarily expert in cybersecurity or AI.Thus, the student must describe suitably all aspects in the lifecycle of the project: background, through requirements, design,implementation, evaluation and conclusions; LO8 To present effectively work in progress and engage in constructive discussion about that work and its context.','Spring 2018/19','For their individual project, students can choose from a wide range of possibilities in many different environments both within and outside theUniversity. The project is completed during the summer, and each student will have a personal academic supervisor to guide them during this period.The individual project is examined by a dissertation based on the project work and an oral examination.This module has been designed for students taking the MSc Cybersecurity and AI programme. The topic will be at the interface of Cybersecurity andAI. This provides a significant element of \"glue\" bringing together the two areas that make up the programmes.','Students use departmental and/or external facilities and are exposed to the state-of-the-art methods and concepts relevant to the projecttopic. Students are expected to take responsibility for their own learning [LO1, LO2, LO3, LO4, LO5, LO6], and to plan and progress theirproject in a professional and systematic way [LO2, LO3, LO4, LO5]. the progress made is reviewed at regular meetings with theirsupervisor(s).Project supervisions will encourage the student to consider how their work should be evaluated. Students will be encouraged to developevaluation criteria at an early stage but also as the work progresses. This may involve setting formal requirements and evaluating againstthem. However, some post-hoc reflection is also to be encouraged, with students addressing for example, what they learned from theproject process [LO5. LO7, LO8].Project supervisions will be used to engage students in the wider contextual issues [LO6].Project work will be documented in a dissertation [LO7].Students will receive feedback from supervisors on their immediate presentations, posters and dissertations, supporting the development ofvaried communication skills. In addition, regular project dissertations with supervisors will develop oral communication skills [LO7, LO8].'),('This unit aims to: A1 provide the student with an understanding of fundamental security properties that we desire to maintain and why they are importantand of the principal security mechanisms used to uphold these properties; A2 develop an understanding of important security strength criteria, an appreciation of the sources of confidence that are associated withspecific security mechanisms, and the ability to calculate or otherwise determine the strength of specific mechanisms in their deployedcontext - We will address quantitative criteria (e.g. for cryptographic elements) and qualitative approaches (e.g. some formal methods for protocolproofs of correctness); A3 develop the analysis and synthesis skills necessary to identify important threats to systems under examination, evaluate the degree towhich threats to systems are countered, and propose countermeasures or appropriate changes to countermeasures to achieve effective andefficient risk reduction; A4 enhance the communication and professional skills of the student; A5 familiarise the student with the contextual issues relevant to the topics taught - professional, legal, ethical, political etc.','Examination (2 hours) - 70% [LO1, LO2, LO3, LO4, LO6] Podcast (3 minutes delivery) - 10% [LO4, LO5, LO6] Coursework (e.g. Mole quizzes) - 20% [LO1, LO2, LO3, LO4, LO6]','Security​ ​PropertiesConfidentiality,​ ​Integrity,​ ​Availability,​ ​Anonymity,​ ​Non-repudiation,​ ​Privacy​ ​etc.Identification​ ​and​ ​Authentication:Password​ ​systems,​ ​graphical​ ​passwords​ ​systems,​ ​biometrics,​ ​CAPTCHAs,​ ​etcSocial​ ​engineering​ ​attacks.Access​ ​Control			 Basic​ ​mechanisms​ ​of​ ​Mandatory​ ​Access​ ​Control​ ​and​ ​Discretionary​ ​Access​ ​Control. Economics​ ​based​ ​risk​ ​budget​ ​approaches.Modern​ ​cryptography:Stream​ ​cipher​ ​basics.​ ​Divide​ ​and​ ​conquer​ ​correlation​ ​attacks.Block​ ​ciphers​.Modes​ ​of​ ​encryption:​ ​Code​ ​Book,​ ​CFB,​ ​OFB,​ ​CBC.Attacks​ ​on​ ​cryptographic​ ​algorithms:​ ​linear​ ​cryptanalysis,​ ​differentialcryptanalysisPublic​ ​key​ ​algorithms:​ ​From​ ​RSA​ ​and​ ​Diffie​ ​Hellman​ ​to​ ​modern​ ​systems.Cryptographic​ ​hash​ ​functions.Power,​ ​timing,​ ​fault​ ​injection​ ​and​ ​other​ ​attacks.Brute​ ​force​ ​potential.​ ​The​ ​rise​ ​of​ ​compute​ ​power.The​ ​threat​ ​from​ ​quantum​ ​computing.​ ​Post​ ​quantum​ ​crypto​ ​(at​ ​a​ ​high​ ​level).. Quantum​ ​key​ ​distribution​ ​protocols.','15','Assignments marked using published criteria, submission commented and returned by MOLE within 3 weeks. Students will meet with their supervisors regularly (and, where relevant, external clients) to discuss progress and problems encountered,and to review issues that arise during the project. Formative feedback will be provided by:a) online quizzes or multiple choice quizzes;b) surgery hours by teaching staff;c) verbal feedback in practical sessions. Some practical session work will also be evaluated by the students themselves with academicprompting and additional contributions where necessary.','Professor John Clark','com6014','Fundamental Security Properties and Mechanisms','By the end of the unit, a candidate will be able to:LO1 [A1] explain what the major system security properties are, why they are important, and what mechanisms are available to supportthem; LO2 [A2] describe security strength criteria for specific mechanisms (nonlinearity, autocorrelation and complexity measures forcryptographic components, classificationperformance criteria for biometrics, etc.), explain the rationale behind them, and determinethe strength of specific mechanisms (e.g. calculate specific cryptographic strength indicators);LO3 [A3] analyse deployed mechanisms, identify weaknesses in them, and demonstratehow they can be exploited; LO4 [A3] choose suitable security requirements and mechanisms in a variety of system contexts; LO5 [A4] independently research material relevant to the module and communicate findings to a non-specialist audience LO6 [A5] articulate the contextual issues (professional, legal, ethical, political etc) that apply.','Autumn 2018/19','This wide-ranging module covers some fundamental concepts, properties, and mechanisms in security, e.g. identity, authentication, confidentiality,privacy, anonymity, availability and integrity. Cryptographic algorithms are explored together with major attacks (using a break-understand-and-fixapproach). High level security protocols are explored (passwords, graphical passwords, key distribution and authentication protocols) together withsome rigorous mechanisms for reasoning about their correctness (e.g. belief logics). Other mechanisms such as biometric authentication are alsocovered.','10 hours of online materials. These content delivery elements will cover theoretical and practical aspects but also act as an index toreferenced materials. All LOs except LO5. Detail provided by referenced materials; 8 hours (4 x 2 hours) practical sessions on cryptography related aspects.- This addresses LO1, LO2, LO3 and LO4. Students have to implement attacks and analyses which exposes strengths and weakness ofmechanisms; 8 hours (4 x 2 hours) practical sessions on the non-cryptographic aspects.- This addresses LO1, LO2, LO3, LO4, LO6; 10 hours (5 x 2 hours) seminars/discussions by external speakers.- Addresses all LOs except LO5; 116 hours of independent study of supporting referenced materials. Wherever possible referenced materials will be freely available onthe web. Students are expected to read around the subject. Independent study is an important component of the module.-Addresses all LOs.'),('This unit aims to: Provide students with the fundamental understanding of how secure software-based systems are developed and toprovide first hand experience in the security analysis and the secure development of sotware-based systems. Provide the student with the fundamental understanding of the threat landscape of software-based systems;Provide the student with experience in detecting and assessing vulnerabilities and threats in the context of software-based systems; Provide the student with fundamental understanding of how secure software is developed; Provide experience in analysis and development approaches for secure system software.','Assessment will be 70% Exam and 30% Coursework','Lectures will cover:(Web) Application Security Software Software SecurityThreat ModellingSecure ProgrammingSecurity TestingStatic code analysis The lecture includes lab sessions that require an understanding of Linux systems and programming skills.','15','Students will receive feedback in the tutorial sessions in which solutions for the problem sheets are discussed as well as in the lab sessions.','Dr Achim Brucker','com6015','Development of Secure Software','By the end of the unit, a candidate will be able to:Understand and explain a Secure Software Development Lifecycle; Understand threat modelling and apply it to assess the security risk of software architectures;Understand the principles of secure software architectures and be able to compare weaknesses and strength wrt security andprivacy of different architectures; Understand software vulnerabilities, and be able to explain their causes and to assess their impact for a specific system, theircauses, and impact; Understand to develop secure software using defensive programming techniques and apply them to own developmentprojects; Understand the principles of static and dynamic security testing and verification techniques and be able to assess whichmethod to use for a given system, e.g., based on the threat assessment and development technologies.','Spring 2018/19','This module covers the security analysis as well as the secure development of software-based systems both on an architectural as well as a system level. The main goal of this module is to teach the foundations of secure software design, secure programming, and security testing. The module requires a solid understanding of software development in general and, in particular, of at least one programming language (e.g., Java, JavaScript, Ruby, C#, F#, or C) and basic software development tools such as an IDE (e.g., Eclipse, VS Code), a revision system (e.g., git), or build systems (e.g., Maven, Gradle, npm, FAKE). Moreover, an understanding of database and Web applications is required. The labs require a basic command of Linux in general and the command line (shell) in particular.','The on-site parts of the module will be delivered as a combination of traditional lectures flipped classroom sessions, practical work. Thelectures will be supported by exercise sheets and reference material to be studied by the students independently; The on-line part of the module will replace the traditional lectures by short video lessons and the flipped classroom style sessions bydiscussions in an online forum. Practical parts (labs) will be provided in such a form that students can either execute them on their owncomputers or they will be made easily accessible over the internet; The flipped classroom sessions will engage the students in discussing software security aspects both bases on the exercise sheets, taught materials, as well as reference material. This deepens the understanding of material discussed in the lecture and contributes to the business and management aspects.'),('This unit aims to: A1 to develop in-depth understanding of both the theoretical and practical issues in the field of cyber threat hunting and cyberinvestigation; A2 to consolidate knowledge of various computer systems and understand their importance in an incident handling and cyber investigation; A3 to develop necessary skills, methodologies and processes to detect cyber incidents and conduct in-depth computer and networkinvestigation; A4 to develop an understanding of how the compromise of a system may be detected; A5 to develop an understanding of how data on systems may be analysed and evidence collated in a rigorous and defensible manner. A6 to develop an understanding of and ability to implement and analyse specific forms of non--virulent malware (steganography, covert channels)','Assessment will be 50% Practical Exam and 50% Research Assignment','Non-virulent MalwareSteganographyCovert ChannelsEnterprise​ ​Threat​ ​Hunting​ ​and​ ​Incident​ ​ManagementOverview​ ​of​ ​Incident​ ​handling​ ​and​ ​threat​ ​hunting​ ​tools,​ ​techniques​ ​and​ ​procedures,			 Identification​ ​of​ ​compromised​ ​systems,​ ​Detecting​ ​active​ ​and​ ​passive​ ​malware,​ ​			 Incident handling​ ​and​ ​incident​ ​management​ ​frameworksData​ ​Collection​ ​and​ ​Forensics​ ​Imaging​ ​processFile​ ​system​ ​data​ ​collection​ ​and​ ​preservation​ ​techniques,​ ​Memory​ ​imaging​ ​and​ ​volatile			 data​ ​preservation,​ ​Collection​ ​of​ ​network​ ​flow​ ​data,​ ​Mobile​ ​device​ ​imaging​ ​and​ ​evidence collection,​ ​Remote​ ​data​ ​acquisition​ ​techniquesFile​ ​System​ ​AnalysisFile​ ​system​ ​timestamps​ ​analysis,​ ​Master​ ​File​ ​Table​ ​(MFT)​ ​investigation,​ ​Detecting​ ​and			 recovery​ ​of​ ​deleted​ ​files,​ ​Volume​ ​shadow​ ​copy​ ​analysis,​ ​Event​ ​log​ ​analysis			 Memory​ ​AnalysisIdentification​ ​of​ ​rouge​ ​processes,​ ​DLLs​ ​and​ ​file​ ​handles,​ ​Detection​ ​of​ ​suspicious​ ​drivers			 and​ ​in-memory​ ​Windows​ ​Registry​ ​examination,​ ​Advanced​ ​memory​ ​investigation​ ​with Volatility,​ ​Code​ ​injection,​ ​malware​ ​and​ ​rootkit​ ​hunting​ ​in​ ​memoryNetwork​ ​Data​ ​AnalysisNetFlow​ ​data​ ​analysis,​ ​Analysis​ ​of​ ​encrypted​ ​network​ ​data,​ ​Wireless​ ​network​ ​forensics, FTP,​ ​HTTP,​ ​SMTP,​ ​DNS​ ​data​ ​analysis		 Intrusion​ ​ForensicsEvidence​ ​of​ ​execution​ ​analysis,​ ​Timeline​ ​analysis,​ ​Analysis​ ​of​ ​adversaries​ ​lateral movements,​ ​Understanding​ ​malware​ ​persistence​ ​mechanisms','15','Assignments marked using published criteria, submission commented and returned by MOLE within 3 weeks. Students will meet with their supervisors regularly (and, where relevant, external clients) to discuss progress and problems encountered,and to review issues that arise during the project. Formative feedback will be provided by:a) online quizzes or multiple choice quizzes, for all lectures and related content.b) surgery hours by teaching staffc) verbal feedback in practical sessions. Some practical sessions will also be evaluated by the students themselves with academic promptingand additional contributions where necessary','Prof. John Clark and Dr Anand Sengodan','com6016','Cyber Threat Hunting and Digital Forensics','By the end of the unit, a candidate will be able to:LO1 [A1, A5] Develop a hunting and investigation plan for a range of different cyber environments; LO2 [A2, A4] Identify residual remnants of attacker tools, tactics and procedures in enterprise networks;LO3 [A3, A5] Collect and preserve evidences from variety of traditional and modern computing platforms; LO4 [A2, A5, A6] Critically analyse various cyber incidents and hunt for remnants of threat actors\'activities in file system, memory and network data; LO5 [A2, A3, A5, A6] Analyse and document investigation results of collected evidences from emerging computing platforms.','Autumn 2018/19','The module provides an in depth view of threat hunting in memory, file system and network data and an introductory analysis of malicious programs.Practical sessions will elaborate on key concepts of incident handling, cyber threat hunting and digital investigation along with detailed analysis of real world case studies. We will also introduce some unusual and non-virulent types of malware.','All sessions are conducted in a secure environment. This may mean the standard programming environment or via laptops issued solely for the purposes of the module use. Each session starts with introducing the theoretical foundations relevant to adversarialactivities of interest and relevant artefacts.Afterwards, we set up an environment to replicate the adversaries\' tactics, techniques and procedures. Generated artefacts of adversaries\'activities are then collected and analysed.Finally, collected artefacts are analysed based on their evidential value and the session is completed with a discussion about lessons learnedin that session. The practical exam(s) will evaluate students\' ability to conduct in-depth threat hunting on different platforms and extract artefacts frommemory, file system and network data in a forensically sound manner. Students will also be required explain what they are doing, and to beable to articulate ethical issues applicable to what they\'ve done; For the assignment students should conduct a forensics investigation of an emerging cyber platform, document their findings, and compilea report encompassing literature survey and results of their investigation; The lectures and lab sessions are sufficiently diverse to cover LO1, LO2, LO3, LO4 and LO5.'),('This unit aims to: A1 develop understanding of the fundamental security issues facing modern critical control and embedded architectures and of thetechniques and mechanisms to address them; A2 develop knowledge and understanding of the constraints under which embedded and control systems operate and how these affect howsecurity may be provided, e.g. how resources can be traded against security and what technologies are available for providing security in lowresource environments; A3 develop the student\'s ability to analyse the risks of specific embedded systems and to determine (synthesise) appropriate risk reductionmeasures for a variety of embedded and control systems; A4 develop the student\'s team working and collaboration skills; A5 develop the ability to research a security topic and communicate findings to a security audience.','Assessment will be 75% Open Assessment - Group Report (3000 words) and 25% Poster (Prepare a poster on a topic relevant to the module)','Cyber-physical​ ​systems.SCADA​ ​and​ ​SMART​ ​Systems.		 Robots,​ ​autonomous​ ​vehicles,​ ​​​and​ ​of​ ​advanced​ ​manufacturing​ ​systems,​ ​the Internet​ ​of​ ​Things			 Threat​ ​models​ ​for​ ​such​ ​systems​ ​and​ ​attacks​ ​on​ ​them.Trust​ ​and​ ​reputation​ ​in​ ​these​ ​systems.Security​ ​of​ ​operating​ ​systems​ ​and​ ​middleware​ ​(e.g.​ ​for​ ​Robot​ ​devices​ ​and​ ​for​ ​IoT		 middleware)Secure​ ​communications​ ​and​ ​Protocols.​ ​Relevant​ ​Standards.			 Hardware​ ​assurance​ ​and​ ​trusted​ ​computing.Effects​ ​of​ ​limited​ ​resources.​ ​Low​ ​power​ ​design.Exemplars:		 Smart​ ​card​ ​securityRFIDsSecurity​ ​of​ ​robot​ ​devicesManufacturing​ ​control​ ​systems Drone​ ​security.Intrusion​ ​handling​ ​and​ ​difficult​ ​issues:		 Intrusion​ ​detection​ ​in​ ​control​ ​and​ ​embedded​ ​systems and Intrusion​ ​responses​ ​in​ ​various​ ​contextsSafety​ ​and​ ​security​ ​considered​ ​together: 		 Analysis​ ​approaches','15','Assignments marked using published criteria, submission commented and returned by MOLE within 3 weeks. Students will meet with their supervisors regularly (and, where relevant, external clients) to discuss progress and problems encountered,and to review issues that arise during the project. Formative feedback will be provided by:a) online quizzes or multiple choice quizzes, for all lectures and related content.b) surgery hours by teaching staffc) verbal feedback in practical sessions.','Professor John Clark','com6017','Security of Control and Embedded Systems','By the end of the unit, a candidate will be able to:LO1 [A1] explain the security properties desired of systems with embedded or control architectures, such as robots, manufacturing controlsystems, autonomous vehicles, and the Internet of Things, and explain why they are important; LO2 [A2, A3] identify the threats to embedded and control systems, what the vulnerabilities of such systems are, and what attack can beused to compromise security;LO3 [A1, A2, A3] explain the architectures and security mechanisms used to uphold desired properties, the practical resource constraintsthat apply, and how these influence the security that can be provided; LO4 [A2, A3] explain how the safety of such systems is critically dependent on security and analyse security and safety with common tools; LO5 [A4] appreciate the practical issues faced when working in a team (e.g. how skills and capabilities of team members can be harnessedeffectively, how levels of commitment vary, how task work may be allocated fairly, how constructive criticism may be engineered, how tasksmay be planned and organised, and how team working can go wrong) and resolve such issues when they arise; 	LO6 [A5] independently research a topic and communicate their findings about it to the general public.','Spring 2018/19','This module will explore security issues in systems where computation is carried out to sense, analyse, and control physical system elements. Thesesystems typically react in real time to external events. Examples range from washing machines, through autonomous vehicles and traffic managementsystems, to power distribution systems, automated manufacturing systems, robotic applications and web enabled toys. Many now, or will, operate aspart of the \"Internet of things\". A breach in security of the systems of interest could also have catastrophic safety consequences. complications arisewhen intrusions are detected, e.g. closing down a system may simply not be possible.','10 hours of online materials. LO1, LO2, LO3 and LO4; 10 hours (5 x 2 hours) practical sessions. Students work individually and alsoin teams. LO1, LO2, LO3, LO4 and LO5; 10 hours of seminars/discussions by external speakers. LO1, LO2, LO3, and LO4; 70 hours of Independent study of supporting referenced materials. Wherever possiblereferenced materials will be freely available on the web. Students are expected to read around the subject. independent study is animportant component of the module.LO1, LO2, LO3, LO4 and LO6.[Note assessment is a group project for 30 hours and an individual element for 20 hours.LO6 is addressed via the creation of an assessed poster and the independentresearch needed to create it.]'),('This unit aims to equip students with a sound understanding of the concepts and design issues related to current network and internetwork architectures, together with an understanding of the relevant concepts of computer architecture. In particular, the module explores the relationships between services and protocols for networks and internetworks, so as to show how they achieve secure and reliable transmission over noisy and insecure channels, and the impacts of the mechanisms used on the capacity of the networks.','80% Formal examination 20% Coursework Individual research study on a particular topic from the module.','representation of dataOSI model local area network (LAN) protocols wide area network (WAN) protocols wireless network protocols issues on network performance internet protocols data compressionerror detection and correction cryptography','15','Problem sheets are distributed for students to review the materials at home. Feedback to problem sheets are provided during the tutorial hours.','Dr Yoshi Gotoh','com6063','Network and Internetwork Architectures','By the end of the unit, a candidate will be able to demonstrate:understanding of algorithms for error detection and conflict resolution within networks, and of the operation of protocols that use them;understanding of the OSI layered protocol model;ability to manipulate data representations at the different levels of abstraction in the layered model;understanding of the internet protocol suite;understanding of the function and design of local and wide area networks and internetworks, and of internetworking components such as bridges and routers;ability to select appropriate routing algorithms for various configurations of wide area network;understanding of the mathematical models for network reliability and capacity;ability to apply these models to calculations of network reliability and capacity; understanding of algorithms for encoding and decoding data for secure transmission, and the underlying models of data security;','Autumn 2018/19','This unit introduces the principles of computer networks and internetworks, together with relevant background material on computer architecture. The emphasis of the unit is on the concepts and design issues related to layered communication protocol architectures, local area networks and internetworking (especially the internet protocol suite), with a particular focus on the issues of network security, capacity and reliability, and the mathematical models underlying these.','In addition to lectures, there will be approximately 4 hours of problem solving/example classes. The problem sheets will reinforce concepts covered in lectures, in preparation for the end of module exam. The Tutorials will support the individual research study for which students study one module topic in particular depth.'),('to provide a grounding in object-oriented programming techniques; to inculcate a component-based approach to large program design; to introduce key aspects of GUI design; to develop an understanding of data structures and algorithmic complexity to establish a sound and consistent programming style in Java.','There will be no written examination for this module. Assessment will be based on a 3-stage coursework assignment weighted 35%, 35% and 30% respectively. For each stage, there will be an individual interview with the module leader and demonstrators to demonstrate each piece of coursework and to answer questions about the assignment.','Review of object-oriented programming: objects, classes, inheritance and polymorphismException handlingRecursionInput and outputGenericsCollectionsSwingThreads and Concurrency','15','The primary form of feedback will be the grades and individualised feedback comments on the first two stages of the assignment. Individual feedback will be provided to students during the individual interviews held after the submission of each piece of coursework. Marks will be returned with sufficient time for problems to be addressed in the next installment. Additionally, regular lab work will be offered to students and discussed in labs and classes with the module leader and demonstrators.','Dr Maria-Cruz Villa-Uriol','com6102','Advanced Java Programming ','By the end of this course, students will: understand what is meant by object-oriented and component-based programming;understand the time and space trade-offs between different implementations of collections;understand the basics of visual application programming.','Spring 2018/19','This module presents the object-oriented approach to building large software systems from components in the Java Programming Language. It assumes basic Java Programming skills acquired in com6471. Large-scale program design and implementation issues are covered, using the Java Application Programmer\'s Interface, the Java Foundation Classes, the Java Abstract Windowing Toolkit and the Java Collections Framework. Detailed topics include: data and procedural abstraction, generics, collection interfaces and implementations, searching and sorting algorithms, time and space complexity analysis, the event-driven model of computation, GUI building and files.','Teaching will begin in the week before semester starts followed by lectures and practical classes for the first 6-7 weeks of semester. Laboratory sessions will be ebedded during lectures to support the practical work.'),('This unit aims to give students the opportunity to: demonstrate their ability to work as a constructive and effective member of a team; demonstrate and improve their technical abilities in the areas relevant to the project;demonstrate and improve their professional skills, particularly those of time and work management, risk management, andinterpersonal skills; demonstrate and hone their skills in dealing with real-world problems.','The assessment is entirely assessed on the basis of the project deliverables. General communication skills, motivation and general approachto the project are monitored continuously via meetings with demonstrators and the module leader(s). Skills such as critical assessment of information,imaginative application of subject-specific principles and the organisation and expression of ideas are assessed primarilyvia the production of collective project documentation. Where relevant, external contact(s) may be invited tocomment on the quality of the physical deliverables. In addition, students will be asked to assess their own, and each other\'s,contribution to the team, and this information will be used to moderate individual marks.','This module provides students with the experience of building software products to the specification of a client while working in a software team. The module makes use of project based learning and as such, students learn by doing rather than attending explicit lectures about every aspect of software development. Topics to be covered include:Project management;Agile;Requirements Engineering;Team working;Documentation.','15','Feedback will be provided via regular meetings with demonstrators and/or the module leaders.','Dr Mike Stannett and Dr Olakunle Olayinka','com6103','Team Software Project','By the end of the unit, a candidate will be able to demonstrate the ability to:work constructively as a member of a team; research the background to a multi-faceted practical development problem;plan and manage the process of producing a solution to that problem; contribute effectively to that solution process;document the work that they have done, review it critically, and present it to others.','Spring 2018/19','This team project aims to provide insights and wider context for the more practical aspects of the taught modules, and to provide students with experience of working in teams to develop a substantial piece of software','The module will start with basic introductory material on project management and team working, but the majority of the work will be conducted as independent study (you will be working with your fellow team members to produce your project deliverables). Regular tutorial/advice sessions will also be provided.'),('This unit aims to: A1. Provide an insight into the more practical aspects of the taught modules comprising the MSc in Software Systems and InternetTechnology (comT138); A2. Provide experience in team software project management.','Each stage of the five-stage project report is assessed by the project manager, with feedback given after each stage (L1, L2, L3). A mark isawarded based on team performance, with a weighting for individual student performance (L4); Software demonstrations are given to the project manager and project client (L4). A mark is awarded based on the quality of the softwareengineering processes and products (L3) and whether the software meets the client\'s requirements (L2, L3); A proportion of the mark for each stage of the five-stage project, and for the software demonstrations, is dependent upon whetherstudents meet the prescribed deadline for the corresponding deliverable (L4); Student marks are moderated by an internal examination panel, the departmental Board of Examiners and external examiners.','This module gives practical application of the theory that was developed in com6105 Software Engineering for Internet Technology. Students will apply the theory to develop a software product, as specified by their client. The process of software development is the focus of the module, including:Project managementTeamworkingRequirements engineeringPrototypingTestingDocumentation','15','Students will receive formative feedback during weekly tutorials, and summative feedback after each stage of the five-stage project.','Dr Emma Norling','com6104','Team Software Project (SSIT)','By the end of the unit, a candidate will be able to:LO1. Develop commercial and industrial dimensions of software engineering, including databases, the internet, and interoperability (link toA1); LO2. Describe human, social, and professional issues relating to the application of computing (link to A1);LO3. Apply a software engineering process which takes a project through the stages of the software lifecycle from client interviews,requirements capture, analysis and design to implementation and testing (link to A1); LO4 Demonstrate team working skills, including personal responsibility and group management ability, interpersonal communication skills,leadership and delegation, and the ability to plan to meet deadlines (link to A2).','Spring 2018/19','The Team Software Project (SSIT) is a group software engineering project which runs over the Spring semester. The philosophy underlying the projectis that the skills needed for team working in the software engineering field can most effectively be learned by experience. The project is based arounda client (who may be from an external organisation or another University department) who has a real software development problem to be solved.Students are organised into teams of approximately five people, and they work cooperatively on the analysis, design, implementation and testing ofthe client\'s software.','The module will start with basic introductory material on project management and team working, but the majority of the work will be conducted as independent study (you will be working with your fellow team members to produce your project deliverables).Weekly sessions are provided - which all team members are expected to attend - during which client meetings will take place and progress reviewed'),('This unit aims to: A1 - Promote the psychological basis for successful developer-customer interaction, design abstraction, and usability; A2 - Develop skills in applying software analysis and design methods to create software systems for target customers; A3 - Develop analytical skills for measuring the usability and ergonomics of software systems.','Students will develop a reflective portfolio based upon the practical exercises which are completed in class. This portfolio will includeexamples from the practical exercises and a written reflection of approximately 3000 words (100%).','Software ProcessesAgile Software DevelopmentRequirements EngineeringSystem ModellingDatabase DesignQuery ProcessingArchitectural DesignDesign PatternsDetailed DesignVerification and TestingUsability and Experimental Design','15','During practical sessions; individual feedback on marked exercises; general class feedback on main issues.','Dr Emma Norling','com6105','Software Engineering for Internet Technology	','By the end of the unit, a candidate will be able to:LO1 - Design an uncluttered, intuitive user interface that supports the business process of the customer; LO2 - Recognise the different mind-sets of the developer and customer and mitigate the effect of bias in requirements analysis and design;LO3 - Choose an appropriate software lifecycle and project management strategy for different kinds of software project; LO4 - Use appropriate software analsyis and design models to capture the essentials of a design succinctly and accurately; LO5 - Evaluate software systems quantitatively and qualitatively for their ease of use by target customer groups.','Autumn 2018/19','This module is concerned with software engineering techniques, with a particular emphasis on web-based systems (including user interface design anddatabases). It covers the appropriate choice of software lifecycle model, the interactions between developer and customer, and the conceptualmanagement of information from requirements through to detailed design in the context of database-backed web systems.','Theoretical concepts will be introduced in lecture sessions, reinforced by practical case-based examples in problem solving sessions.'),('To teach students the theory and implementation of bio-inspired machine learning algorithms.','Assessment will take the form of lab assignments/reports (40%) and a formal exam (60%)','Topics to include:Learning and Memory in Brain CircuitsUnsupervised Learning in Artificial Neural Networks (Oja\'s rule, Principal component Analysis, Clustering/ competitive Learning)Reinforcement Learning in Artificial Neural Networks (Temporal Difference Learning and Deep Reinforcement Learning).','10','Students will receive feedback on assignments in writing via MOLE and via an in-class feedback session. Feedback will also be delivered during labs and office hours (upon request).','Prof. Eleni Vasilaki','com6106','Adaptive Intelligence','By the end of the course, students shouldhave developed an understanding of basic neuroscience concepts and experimentsbe able to read relevant textbooks and research articlesunderstand the theory, implementation and application of unsupervised and reinforcement learning algorithmsbe able to write research reports be able to work with real data','Spring 2018/19','This course will examine the theme of bio-inspired Machine Learning and in particular of Unsupervised and Reinforcement Learning in Neural Networks. The first half of the course covers Unsupervised algorithms (Clustering, Principal component Analysis) that could potentially have biological counterparts in the human or animal brain. The second half of the course introduces the theory of Reinforcement Learning in a simple and intuitive way, and more specifically Temporal Difference learning and the SARSA algorithm. It also discusses state-of-the-art methods (Deep Reinforcement Learning).','The course will be delivered in one lecture session each week, backed up by interactive, in-class exercises and homework. Additional practical work and lab sessions will be involved. Group discussion of issues relevant to the course will be encouraged. Self-study of the course is also required, supported by a variety of resources (e.g. journal articles, books). Knowledge of programming (Matlab or Python) is compulsory.'),('to develop an understanding of the fundamentals of text processing; to acquire familiarity with techniques for handling text corpora; to develop an understanding of the basic problems and principles underlying text processing applications.','Formal examination [50%]. Coursework [50%].','Programming for text processing Linguistic backgroundText processing topics, such as: Information retrievalText compressionInformation ExtractionSentiment analysis','15','Students can discuss their lab exercise code during lab sessions. They will receive feedback comments on their marked assignment work later on in the term (prior to the exam).','Dr Mark Hepple and Prof. Rob Gaizauskas','com6115','Text Processing','By the end of this unit, a candidate should be able to: code in a programming language well-suited to text handling identify and explain key techniques that are relevant to performing a number of text processing tasks implement systems able to analyse large volumes of textual data, and to perform basic text processing tasks','Autumn 2018/19','This module introduces fundamental concepts and ideas in natural language text processing, covers techniques for handling text corpora, and examines representative systems that require the automated processing of large volumes of text. The course focuses on modern quantitative techniques for text analysis and explores important models for representing and acquiring information from texts. Students should be aware that there are limited places available on this course','There will be 2 lectures per week, with not more than 20 lectures overall.A third session will be available for lab classes or tutorials some weeks.'),('The aims of this module are: to develop an understanding of the subtleties of concurrent and mobile systems\' behaviours;to develop an understanding of process calculi, in particular CCS and the pi-calculus;to develop the ability to construct models of simple systems in these calculi, and where appropriate to use software tools to investigate their properties; to develop an understanding of the formal semantics of process algebras such as CCS and the pi-calculus; to develop the ability to reason about system behaviour using process algebras and related logics, and to program concurrent systems in Erlang..','The module is assessed by assignment (30%) and written examination (70%).','1. INTRODUCTION Sequential vs concurrent systems; real vs interleaving concurrency; mobile systems. 2. PART ONE: CCSUsing simple equations to represent complex systems; synchronisation and non-determinism; structured operational semantics; flow diagrams and transition diagrams; simulation and bisimulation; the importance of hidden internal actions.Detailed examples: modelling a conversation; modelling an n-place buffer.Modal logics, model checkers and workbenches: using software to reason about concurrent systems.3. INTERLUDE: Other approachesCSP, Petri nets, Mazurkiewicz traces; P systems and other bio-inspired models. 4. PART TWO: Pi-Calculus and its successorsAdding mobility to CCS; transition rules; replication vs recursion; scope extrusion; process equivalence.The computational power of pi-calculus: representing data types and functions as pi-calculus processes.Variations on a theme: stochastic pi, security and ambients, modelling the flow of encrypted data.5. DETAILED CASE STUDY A case study illustrating the techniques used in modelling real-world situations.','15','Students will receive feedback in lectures and during the weekly lab sessions. Weekly exercise sheets will also be provided to help students assess their own progress.','Dr Ramsay Taylor','com6116','Theory of Distributed Systems','By the end of this course the students should: appreciate the fundamental techniques and principles needed to formally specify languages for concurrency;understand the mathematical theory underlying CCS and the pi-calculus and be able to apply it to concrete examples;be able to construct concurrent specifications from requirements, to transform and analyse them using appropriate tools and techniques, and to apply these skills to problems drawn from a number of different fields; appreciate the scope and limits of algebraic techniques in the analysis of concurrency; have developed their ability to critically evaluate their work and to discuss it coherently with others;and have expanded their capacity to model, reason about and evaluate complex systems.','Spring 2018/19','The aim of this module is to set out a strong theoretical basis for the analysis and design of concurrent, distributed and mobile systems. We will use the pi-calculus to model and reason about complex systems, studying both its formal semantics and its many uses, via a number of examples. Students should be aware that there are limited places available on this course.','In addition to lectures, the course will include exercise sheets and tutorial sessions; these will cover both the course material and the use of the programming language Erlang to model concurrent process behaviours.'),('This unit aims to: Provide the psychological foundations of human-centred design, including abstraction, ergonomics and developer-customer communication. Develop group-working skills in applying software analysis and design methods to create software systems for target customer groups. Develop technical software development skills, including heterogeneous systems with graphical or web-based interfaces and databases. Develop analytical skills for measuring the usability and ergonomics of software systems.','100% coursework. Group work and individual work.','People and TechnologyHuman-computer InteractionDesigning InteractionHCI and Software EngineeringSoftware Engineering LifecyclesControl Flow ModellingInformation ModellingBehavioural SpecificationDatabase DesignQuery ProcessingArchitectural DesignDesign PatternsDetailed DesignVerification and TestingUsability and Experimental DesignQualitative MethodsQuantitative MethodsStatistical Tests of Significance','20','Dr Maria-Cruz Villa-Uriol, Dr Heidi Christensen - feedback during practical sessions; feedback on marked assessments (two sets of questions)Dr Anthony Simons - feedback during practical mini-labs; formative UML exercises with solutions released weekly in MOLE; feedback on marked group project, with a cover-sheet showing goals met; class email describing main issues.','Dr Heidi Christensen, Dr Maria-Cruz Villa-Uriol and Dr Anthony Simons','com6222','Human Centred Systems Design','By the end of the unit, a student will be able to: Understand and demonstrate the ability to apply principles from human-computer interaction and ergonomics to software development. Understand and demonstrate the ability to manage customer-developer interaction during the requirements capture stage. Understand and demonstrate the ability to apply the principles of user interface design, software architecture design and database design. Work co-operatively in a developer team to deliver a software system that meets the requirements of a target customer group. Evaluate software systems quantitatively and qualitatively for their ease of use by target customer groups.','Autumn 2017/18','This module is concerned with the analysis, design, implementation and evaluation of interactive computing systems for human use; and with the study of major phenomena surrounding them. It will consider the interplay between human users, developers and computers; as such it has a multidisciplinary content with its basis in psychology, human computer interaction and human factors as well as in software engineering and database design.','Lectures, mini-labs, practicals and independent study.'),('The aim of this module is to provide students with detailed knowledge and understanding in one or more aspects of computational intelligence through a substantial investigative project and to develop their critical appraisal, project management, communication and independent research skills.','Students will be assessed via a final project dissertation and oral presentation. These will assess the students’ understanding of the subject material, the appropriateness of the techniques used, their ability to formulate appropriate project aims and objectives and to meet these, their ability to critically analyse their own and others work and the personal qualities demonstrated through the project such as independence, organisation, communication and project specific skills. In addition, formative feedback will be provided to students based on an interim report.','The content of the project is typically selected by the student from a range of topics proposed by staff or industrial partners of the department. Students are also encouraged to propose their own topic, provided they can find a supervisor willing to supervise it and with the agreement of the Projects Officer.','60','Students will receive feedback on their interim report in a meeting with their supervisor, as well as during their regular meetings.','None','com6322','computational Intelligence Individual Project','By the end of this course the students should be able to demonstrate the ability to:• Use the knowledge, understanding and skills gained from the taught modules to conduct project work.• Demonstrate innovation and creativity within the context of an individual investigative project.• Organise, structure and manage a substantial research project and independence in doing so.• Distil and critically assess existing work in the form of a literature survey.• Conduct appropriate theoretical, computational and/or experimental work as necessary for the specific project.• communicate effectively, both written and orally, the results of the project.','Academic Year 2018/19','In order to further develop the broad understanding of computational intelligence you will gain from the taught modules, this module will allow you to specialise in one or more aspects of the subject through an extended research project. You will undertake a detailed investigation into a topic in computational intelligence which will lead to more specialist knowledge and understanding in this specific area. You will also develop your project, research and communication skills. You will be expected to work largely independently but under the supervision of an academic member of staff.','The module will be taught via individual project supervision. Each student will be allocated a supervisor who will meet regularly with the student to provide general and specific guidance and advice. Students, however, will be expected to take the lead on their projects and work largely independently.'),('to provide a grounding in object-oriented programming techniques; to inculcate a component-based approach to large program design;to introduce the major aspects of the Java API; to develop an understanding of data structures and algorithmic complexity;to establish a sound and consistent programming style in Java.','There will be no final examination for this module. Assessment will be based on programming assignments.','The Java language and its characteristics; Objects, classes and instances; Sequence, selection, repetition; Arrays and searching; Inheritance, polymorphism, interfaces and abstract classes; Abstract data types, e.g. stacks and queues; Input, output; Introduction to graphics in Java;','15','Debriefing lectures after assignment hand ins to provide group feedback Individual feedback on assignment performance from individual marking. Feedback in lab class performance through interaction with demonstrators.','Dr Ramsay Taylor','com6471','Foundations of Object Oriented Programming','By the end of this course, students will: understand what is meant by object-oriented and component-based programming;be able to target complex problems onto solutions in the Java Programming Language.','Autumn 2018/19','This module introduces the foundations of object-oriented programming using the language Java. The emphasis of the module is on software engineering principles, and concepts underpinning object-oriented design and development are introduced from the outset. By the end of the course, students will be able to design, implement and test moderately complex Java programs.','Lectures and Laboratory sessions.'),('To raise students’ awareness of the different types of computer attacks and their effect on data privacy and business function To give students a grounding in the fundamental principles of data encoding/decoding and encryption/decryption;To give students a practical knowledge of how these technologies can be used to ensure better data security','Formal Examination [70%]; Coursework/MOLE Quizzes[30%]','Lectures will cover: Security FundamentalsAccess ControlCryptographic FoundationsSignatures and PKIsCrypto AttacksSecurity ProtocolsFormal Analysis of Security Protocols using Model CheckingApplication/Software SecurityThreat ModellingSecure ProgrammingSecurity TestingStatic code analysisSecure Operations and ForensicsThe lecture includes lab sessions that require an understanding of Linux systems and programming skills.','15','Students will receive feedback in the tutorial sessions in which solutions for the problem sheets are discussed as well as in the lab sessions.','Dr. Achim Brucker','com6501','- computer Security and Forensics','By the end of the unit, a candidate will understand: The complexity of the security landscape;The potential vulnerabilities associated with authentication;The advantages and disadvantages of encryption and decryption techniques; The vulnerabilities of wired and wireless networks. They will have demonstrated: A detailed understanding of industrially relevant issues relating to computer security and forensics. The ability to present material in a concise yet comprehensive manner, and to target that material appropriately to the audience in question','Spring 2018/19','This module provides, in general, an introduction into computer security and forensics. In particular, this module focuses on approaches and techniques for building secure systems and for the secure operation of systems. The module complements the mathematics module MAS345 and requires a solid understanding of mathematical concepts (e.g., modulo-arithmetic, complex numbers, group theory) and logic (set theory, predicate logic, natural deduction) as, e.g., taught in the modules com365, com1001, and com2003). Moreover, the module requires a solid understanding of a programming language (e.g., Java, Ruby or C), basic software engineering knowledge and an understanding of database and Web systems, as, e.g., taught in the modules com1003, com1008, com1009, com2001, com6471, and com6102). The lab sessions require a basic command of Linux in general and the command line (shell) in particular. Students should be aware that there are limited places available on this course','Lectures and some practical work.'),('to describe speech production and perception in humans; to teach computational techniques for analysing speech signals.','2 programming assignments (introductory exercise - 10%, main exercise - 45%, total - 55%) 2 Invigilated MOLE quizzes (MOLE quiz 1 - 20%, MOLE quiz 2 - 25%, total - 45%)','Half of the course is devoted to the nature of speech and half to speech signal processing. Topics covered include: speaking, hearing, sounds and symbols, articulatory and acoustic phonetics, phonology, prosody, speech spectra, sampling, fourier transform, linear filters, linear prediction cepstral analysis.','15','Verbal interaction during lectures comments attached to the marks given to the formal assignments.','Prof. Roger Moore','com6502','Speech Processing','By the end of the unit, a student will have acquired: an understanding of the basic mechanisms of speech production and perception; familiarity with acoustic-phonetic descriptions of the speech signal; an understanding of analysis techniques; an ability to implement speech analysis algorithms; basic knowledge of discrete-time signal processing;','Autumn 2018/19','This module aims to demonstrate why computer speech processing is an important and difficult problem, to investigate the representation of speech in the articulatory, acoustic and auditory domains, and to illustrate computational approaches to speech parameter extraction. It examines both the production and perception of speech, taking a multi-disciplinary approach (drawing on linguistics, phonetics, psychoacoustics, etc.). It introduces sufficient digital signal processing (linear systems theory, Fourier transforms) to motivate speech parameter extraction techniques (e.g. pitch and formant tracking). Students should be aware that there are limited places available on this course.','Lectures and scheduled access to a Laboratory for practical work'),('The aims of this module are: to provide a comprehensive theoretical and practical approach to the foundation topics in three-dimensional computer graphics; and to make use of a graphics API (application programming interface) for the construction of 3D computer graphics software','Formal examination (2 hours) [40%] Two assignments: Programming assignment and an individual, focussed study on one topic from the module [60%].','Coordinate systems and transformations [2 lectures] Building and Representing Objects [ 3 lectures ] The graphics pipeline [ 1 lecture ] Rendering [ 3 lectures ] Incremental shading Hidden surface removal The Z-buffer Anti-aliasing Simulating 3D Reality [ 7 lectures ] Simple light object interaction Textures and shadows Advanced light object interaction computer Animation [ 3 lectures ] Review [1 lecture]','15','Ongoing during lab sessions, via online help and in office hours; Final feedback sheet for the assignment','Dr Steve Maddock','com6503','3D computer Graphics','By the end of this course the students should: be able to use matrices to transform (hierarchical) objects in 3D coordinate systems; be able to describe and apply a 3D viewing pipeline to display data-structured objects, modelled in a world of real numbers, on a discrete, raster screen device; be able to reason about the most suitable modelling techniques to use for particular real-world applications; be able to implement standard 3D shading and rendering techniques using a library of graphics routines; understand and be able to describe and discuss a range of techniques for increasing the realism of rendered scenes; understand and be able to compare and contrast advanced rendering techniques; be able to describe and discuss a range of computer animation techniques; understand and be able to implement a range of three-dimensional computer graphics algorithms; be able to describe how computer graphics techniques are used in a variety of application areas, such as in the entertainment industry.','Autumn 2018/19','This module is an introduction to the techniques used in modern 3D computer graphics. It deals with fundamental techniques that are the basis of work in a range of industries, e.g. entertainment and computer-aided design. Both basic and advanced topics concerned with the production of images of abstract 3D objects are covered, including: 3D representations and manipulations in graphics, light reflection models, realism techniques such as shadows and textures, ray tracing and 3D animation. Students should be aware that there are limited places available on this course.','In addition to the formal lectures, there will be approximately 10 hours of practical sessions related to learning OpenGL, as well as online help with the assignment work.'),('The Web will look quite different in five years’ time. This unit aims to let students aware of the changes in Web technologies that are currently taking place, and to prepare them for the coming future. Such changes involve the use of intelligent techniques that will allow more focused searches and the creation of a new breed of automatic services based on intelligent agents. The aim of the module is to describe the main approaches to the advanced web to develop students\' skills in designing and building serious advanced systems for the Web','Group Coursework [100%].','Part I: Setting the Scene: A history of the Internet and the WebPresent and Future WebPart II: Clients and Servers HTTP protocolClient server architectures in NodeJsAsynchronous and synchronous client/server connectionsAccessing remote noSQL databases Socket.io and WebRTC for Web video communicationThe mobile Web: progressive web apps and hybrid appsPart III: horizon scanning Spidering the Web and search engines: why where and whatWeb 2.0 and 3.0: why and whatPart V: The Web of Data Linked Open DataPart VI: Conclusions The future as seen from here.','15','Students will be given formative (i.e.non marked) feedback on the first part of the assignment within three weeks of submission.','Prof. Fabio Ciravegna','com6504','The Intelligent Web','On completion of this course, students should:Know the basics of Web searching and how to design a crawler and a client server architectureKnow about a number of state-of-the-art intelligent web methodologiesHave an in-depth knowledge about in client server architectures supporting services such as noSQL databases and connections to remote APIsBe able to write or customize a web system which uses the Web of Data and Web 2.0 techniques','Spring 2018/19','This course is concerned with getting acquainted with the present and future of the intelligent Web. We will read and discuss both introductory descriptions and cutting-edge research papers. Topics will include:Basic technologies for searching and mining the WWWLarge scale methodologies for the Web (e.g. Mapreduce)Client server architecturesAdvanced mobile Web appsWeb 2.0 and Web 3.0 concepts, including mining social media (e.g. Twitter and Facebook)The Web of Data and the Semantic Web. Students should be aware that there are limited places available on this course.','Students learn the course matter through a mixture of lectures, tutorials and laboratories. Each week there will be 2 hours of lecture/tutorials and from the third week of semester, 1 hour of supervised laboratory work.'),('to present the human and technological issues involved in building safe complex software to introduce the role of standards in the development of safety critical systems; to explain how human factors relate to systems safety and how they must be considered in system design; to introduce the notations and specialised programming languages used for construction of safety critical software; to provide an understanding of the software engineering concepts that are specific to safety critical systems; to examine in detail a range of methods for testing software, and the contributions that they can make to achieving goals for the quality of software.','Coursework [30%] 2 MOLE Quizzes [40%] Lab portfolio[30%]','The nature of safety-critical systems and softwareSafety management: hazards, risks, risk assessment, and reduction, software reliabilityFinite-state machine models and predicatesSoftware engineering lifecycles, processes and activities, the role of verification and validation.Specifying control systems Introduction to testing: forms of testing and approaches to itTest methods and derivation of test casesHazard analysis, HazOp and FMEA Programming practices for safety-critical software','15','Will be provided in problem-solving classes.','Dr Neil Walkinshaw','com6506','Testing and Verification in Safety-Critical Systems','By the end of this unit, students will: Have an overall appreciation of systems and software safety, hazard analysis and the approach to engineering safe systems. Understand the concept of SILs (safety integrity levels) and the principles of the IEC61508 standard. Understand a range of specific human-computer interaction issues as applied to safety-critical systems. Be familiar with specification languages, and be able to use them to construct specifications of appropriate simple systems. Understand the limitations that must be introduced into conventional programming languages when developing software to be used in safety-critical systems. Understand the software lifecycle and its relationship to the development of safety-critical systems. Be able to apply advanced software testing methods to test generation.','Autumn 2018/19','This module provides an introduction to the processes and problems of building complex software such as for use in aerospace applications. Topics covered can be split into four major groups: safety, specification languages, concepts of software engineering, different methods of software testing. A substantial amount of time will be spent on the ideas of software testing and specific testing techniques. Safety includes software and systems safety, methods of performing hazard analysis, human factors and the IEC 61508 standard. Specification languages such as Statecharts. Software engineering concepts focus on the software lifecycle, safe language subsets, software testing and maintenance. The software testing part covers advanced approaches to generating software tests. Students should be aware that there are limited places available on this course.','Lectures will explain the basic theoretical concepts and their applications.Problem solving and examples classes, together with the associated private study and the preparation for the coursework assignment, will give students the opportunity to develop their understanding of the concepts and their practical skills in the development of elements of safety-critical software.'),('To develop an understanding of hardware design and protocol verification by model checking as well as program verification by formalisms such as Hoare logics and separation logic. To study model checking concepts such as temporal logic formulas, state space, reachability algorithms, automata theory, BDD algorithms, principles of hardware verification, and examine case studies with Promela and SPIN. To study program development and verification concepts like: assertions (pre- and post-conditions, invariants), Hoare logics and simple programming constructs, partial and total correctness, separation logic. To discuss current research topics in hardware and software verification.','Exam 100%','Week 1: Introduction and automata-theoretic background Week 2-5: Automata-based and symbolic model checking (linear temporal logic, Buchi automata, BDDs, model checking algorithms) Week 6-10: Program verification based on theorem proving (Hoare logic, partial and total correctness semantics, interactive theorem proving, refinement, separation logic)','15','Weekly feedback is provided in the exercise/tutorial sessions.','Prof. Georg Struth','com6507','Software and Hardware Verification','By the end of this module, a candidate will be able to Understand the fundamental theory underlying hardware and software verification Appreciate the scope, potential and limitations of hardware and software specification and verification Be able to construct formal specifications for hardware and software systems, develop appropriate verification mechanisms and algorithms Utilise adequate tools and languages to formally verify hardware and software systems Develop his/her capacity to specify, analyse, verify and reason about different computing systems Have an understanding of current hardware and software verification research problems and topics','Spring 2018/19','This module introduces state-of-the-art software and hardware verification techniques which nowadays are widely used in industry. They are particularly important in safety-critical applications, where system failures can not be tolerated. Designing high quality dependable computing systems is widely believed to be the main challenge in computer science. Particular focus is on protocol verification and hardware design verification by model checking and program verification by formalisms such as Hoare logics. These techniques presume formal system specifications and use automated tools for analysing whether a system satisfies the properties required or imposed. Students should be aware that there are limited places available on this course.','2 formal lectures plus 1 exercise/tutorial session per week.'),('This unit aims to provide a deep understanding of the fundamental technologies underlying modern artificial intelligence. In particular it will provide foundational understanding of data science,probability in artificial intelligence.','50% Formal examination 50% Coursework, consisting of weekly lab classes and MCQ.','Probability theory Objective functionLinear regression Basis functions GeneralisationBayesian regression Unsupervised learningProbabilistic ClassificationLogistic Regression and Generalised Linear ModelsOther topics','15','Students will receive feedback on their assignments in lab sessions.','Dr Mauricio Alvarez and Dr Haiping Lu','com6509','Machine Learning and Adaptive Intelligence','By the end of the unit, a candidate will be able to demonstrate the ability to understand of probability theory and how it relates to uncertainty in modern artificial intelligence, understand when and how to implement the appropriate learning paradigm for a given application, have a deep understanding (including how to implement) of a range of supervised learning algorithms. Potential examples include: linear regression, linear classification, naive Bayesian classification, principal component analysis, k-means clustering, decision trees. have a broad overview and basis for understanding more complex technologies, such as: the support vector machine, kernel methods, probabilistic graphical models, E-M algorithms, factor analysis, nonparametric Bayesian methods.','Autumn 2018/19','The module is about core technologies underpinning modern artificial intelligence. The module will introduce statistical machine learning and probabilistic modelling and their application to describing real world phenomena. The module will give students a grounding in modern state of the art algorithms that allow modern computer systems to learn from data.','There will be 10 hours of formal lectures and 20 hours of lab classes. These classes may involve computer based problem solving, examples and MCQ. The lectures and example classes will run concurrently, covering similar topics, with theory being laid out in the lectures, and application of the theory taking place in example classes.'),('to develop an understanding of the software architecture underlying modern mobile devices to develop an understanding of how design patterns are used in software frameworks for mobile devices to develop skills in object-oriented programming to develop skills in team working to develop an understanding of usability in mobile applications to develop an understanding of how to process data in a mobile application to develop an understanding of how to access programmatically and use efficiently a phone\'s sensorsto develop an understanding of how to optimise the performance of mobile applications softwareto develop skills in implementing mobile software applications that use text and touch input','Coursework [100%]. Students will plan, design and develop an Android application, working in groups.','Introduction to mobile computingHow to design a mobile appAndroid frameworkTools and development environmentsApp lifecycleViews and layoutsSensorsPersistence and databasesCreating background services','15','Feedback on solutions to laboratory exercise sheets, throughout the semester Feedback on interim and final stages of the project work','Prof. Fabio Ciravegna','com6510','Software Development for Mobile Devices','By the end of the unit, a candidate will be able to: Understand the software architecture of a modern mobile device Understand how design patterns such as model-view-controller are used in software frameworks for mobile devices Implement mobile software applications that use text and touch input as well as using input from sensors Understand the importance of usability in mobile applications and know best practices in implementing mobile apps Understand the important role of navigation in mobile application design, and be able to write an application that is easily navigable Understand how to optimise performance of a mobile device application and use threading Understand how to work effectively as part of a programming team Understand how to store data in a mobile applicationKnow the basics of Android, having developed a reasonably sized project.','Autumn 2018/19','This module aims to provide a thorough grounding in the principles of software development for mobile devices. The Android platform will be used as an example, although the modules emphasizes general principles that are common across all mobile platforms. An important aim of the module is to demonstrate the real-world application of object-oriented programming principles and design patterns in software for mobile devices. Students undertake a substantial software implementation project, working in pairs. The module will be taught primarily using Java and Swift languages.PLEASE NOTE THE CONTENT OF THE COURSE HAS CHANGED comPARED TO LAST YEAR.Students should be aware that there are limited places available on this course.','There will be 1 lecture a week in a lecture theatre, and 2 hours of lab-based lecture. Lectures provide the basic technical material that students need to be able to understand. Programming is a practical skill, so the lectures are supplemented with lab-based classes in which specific technical topics are thought and applied. These classes support the development of practical programming skills.'),('to teach the principles and application of speech technology, covering speech recognition and synthesis to provide experience in building and using speech technology devices.','Formal examination (2 hours) [70%] Coursework [30%]','Introduction to speech technologyPattern processing fundamentals for speechHidden Markov Models and Deep Neural Networks for Speech ProcessingTowards a state-of-the-art ASR SystemAcoustic modellingLanguage modellingSearchAdaptationSpeech recognition application examplesSpeaker identificationSpeech synthesis','15','Students will receive feedback in the weekly practical sessions.','Prof. T Hain','com6511','Speech Technology','By the end of this course the students should: appreciate the difficulties of machine perception in general and speech perception in particular; understand the prevailing techniques for acoustic modelling and language modelling in automatic speech recognition; have seen how these techniques are deployed in spoken language systems; appreciate the difficulties of producing synthetic speech and understand the principles of speech synthesisers and text-to-speech systems; andhave experience in implementing and assessing a speech technology device.','Spring 2018/19','This module introduces the principles of the emergent field of speech technology, studies typical applications of these principles and assesses the state of the art in this area. Students will learn the prevailing techniques of automatic speech recognition (based on statistical modelling); will see how speech synthesis and text-to-speech methods are deployed in spoken language systems; and will discuss the current limitations of such devices. The module will include project work involving the implementation and assessment of a speech technology device. Students should be aware that there are limited places available on this course.','Two formal lectures and a one hour practical session per week, for 10 weeks. Practical work will consist of a project involving the implementation and assessment of a speech technology device. This will include some programming.'),('to give students a well-rounded feel for the problems and approaches of Statistical Natural Language Processing (NLP) to give students an understanding of the potential areas of application of the techniques developed in Statistical NLP','The course will be assessed by lab assignments (40%) in addition to a formal examination (60%) at the end of the semester. Lab assignments will be completed individually and involve a mixture of routine tasks and open ended problems.','Lectures will provide an overview of the field of NLP and its sub-areas, and will introduce and explain its key techniques, including their applicability and limitations. In lab classes, students will practice implementing the NLP techniques taught in class, testing their code in application to real language data. Topics covered will include: N-gram Language Modelling Word Classes and Part-of-Speech Tagging Lexical Semantics, Word Sense Disambiguation and Lexical SimilaritySyntactic and semantic parsingInformation extraction Neural network architectures for NLP','15','Problem sheets will be set during labs sessions and then will discussed in labs and/or lectures. Verbal interaction during lectures.','Dr Nikolaos Aletras','com6513','Natural Language Processing','By the end of this course the students should: be able to describe and discuss the subareas of NLP be able to implement NLP algorithms and techniques; be able to describe and discuss the potential and limitations of NLP techniques for applications such as machine translation, question answering, information retrieval and information extraction','Spring 2018/19','This module provides an introduction to the field of computer processing of written natural language, known as Natural Language Processing (NLP). We will cover standard theories, models and algorithms, discuss competing solutions to problems, describe example systems and applications, and highlight areas of open research. Students should be aware that there are limited places available on this course.','There will be 2 formal lectures and 1 lab session per week.'),('Introduce a statistical analysis of computer networks Show how queuing theory can be used to analyse computer networksShow the applications of queuing theory to other areas of science and engineering','Formal examination (2 hours) [100%]','Review material: Networking Introduction. Random processes and probability theory. A simple network queue: M/M/1 queue Birth death processes Little\'s formula Richer queueing models: M/M/?. Erlang delay. Erlang loss system. Erlang B and C curves. M/G/1. Overview of Simulation: Sampling theory. Obtaining samples from Markov chains.','15','Problem sheets are are set and discussed in class and this provides an opportunity for feedback.','Dr Joab Winkler','com6515','Network Performance Analysis','By the end of the unit the candidate should be able to: Analyse queuing networks and their application to computer networks Show how to design a computer network so that the queues are within specified bounds Appreciate the importance of queuing theory to other areas of engineering','Spring 2018/19','This module considers the performance of computer networks from a statistical aspect, using queuing theory. It is shown that the performance of a computer network depends heavily on the traffic flow in the network, and different models of traffic and queues are used. These include single-server queues, multiple server queues, and the concept of blocking is discussed. Although the analysis is entirely statistical, all the relevant background is provided in the lectures, such that the course is entirely self-contained. Problem sheets are provided in order to assist the students with the course material. Students should be aware that there are limited places available on this course.','The teaching method is by lectures with numerous example and problem sheets so that the students have a good theoretical and practical understanding of the subject. 16 Hours of formal lectures.3 Hours of tutorials.4 Hours of Lab classes.4 Hours of tutorial support classes.'),('to provide a grounding in object-oriented programming techniques; to introduce the major aspects of the Java API; to establish a sound and consistent programming style in Java.','Practical assignments and laboratory-based tests','Introduction to programming in Java Object oriented programming: classes and objects, inheritance, abstract classes and interfaces UML Java Collections Framework Graphics programming and user interfaces: Swing','15','Students will get feedback from two assessed labs and from the assignment at the end of the semester.','Dr Heidi Christensen','com6516','Object Oriented Programming and Software Design','By the end of this course, students will: understand what is meant by object-oriented and component-based programming; be able to target complex problems on to solutions in the Java Programming Language; understand the basics of visual application programming using Swing; be able to document programs using UML.','Autumn 2018/19','This module presents the object-oriented approach to building large software systems from components in the Java Programming Language. It assumes prior knowledge of imperative programming. Large scale program design and implementation issues are covered, using the Java Application Programmer\'s Interface, including the AWT, Swing and the Java Collections Framework. Topics include: data and procedural abstraction, collection interfaces and implementations, the event-driven model of computation, user interface components, streams and files, documentation styles with the Unified Modelling Language (UML).','Lectures will be used to introduce the material, and the main learning method will be practical sessions, during which students will be able to gain experience of the material.'),('This unit aims to make students aware of current web technologies, and to prepare for the future. The aim of the module is to describe the main web technologies to teach how to critically analyse web solutions to develop students\' skills in designing and building solutions for the web to create original solutions to emerging web trends and needs.','Coursework [100%].','Part I: Setting the Scene: A history of the Internet and the WebPresent and Future Web Part II: Web 1.0: Building static and dynamic pages HTML and XHTML JavascriptAccessing Web databases (e.g. mySQL)Client Server architectures client server architectures with NodeJS Part III: Web search Engines, Bots, and Directories Spidering the Web Anatomy of a search engine Part IV: Web 2.0 and beyond: Web 2.0 The basics of the social WebMajor Web 2.0 web sites and servicesUsing Web 2.0 APIs and services (e.g. Twitter, Facebook, Google Maps etc.)Capturing and using Collective Intelligence Part V: Conclusions','15','Students will be given individual feedback on the first part of the assignment within three weeks of submission.','Dr. Vita Lanfranchi','com6517','Web Technologies','On completion of this course, students should: Be able to recognize/identify current web technologiesBe able to critically analyse web solutions and evaluate their appropriatenessBe able to understand and explain the basics of web searching and web crawlingBe able to recognize and evaluate a number of state of the art web systemsUnderstand and explain emerging web standardsHave a critical understanding of web 2.0 conceptsBe able to devise original solutions to emerging web trends and needs','Spring 2018/19','This course is concerned with an introduction to modern Web technologies. We will read and discuss both teaching material and research papers. Topics will include: Technologies for creating static and dynamic Web pages (e.g. HTML, JavaScript)Technologies for Web Databases (e.g. MySql)Methods for searching and mining the WWWWeb 2.0 concepts and technologiesClient Server Architectures.','Students learn the course matter through a mixture of lectures, tutorials and laboratories. Each week there will be 1 hour of lecture/tutorials and from the second week of semester, 2 hours of laboratory-based lesson.'),('This unit aims to... 	develop an understanding of cloud computing at the infrastructure, platform and software service levels and articulate why it is an attractive paradigm for business;develop the practical skills necessary to solve technical problems in order to design, develop and deploy software services on a cloud platform, and to integrate services with related services in a software service ecosystem;develop the personal and technical skills necessary to work productively as part of a team, delivering a large software project to staged deadlines, and to evaluate the work of other teams.','100% coursework consisting of a team interim report, a team final report accompanying the delivered software and an individual evaluation questionnaire.','What is cloud computing?The business case for the cloud;Cloud service models (IaaS, PaaS, SaaS);Cloud platforms, eg Azure, OpenStack, Heroku;Web services and internet protocols;Java servlets and servlet containers;Java presentation tier technologies;SQL and NoSQL data storage options;Service-oriented architectures;Message queues and brokers;Quality, pricing and service level agreements;Security in the cloud;Cloud service ecosystems','15','Students get verbal feedback from the lecturer in response to their questions about designing a cloud platform and software services. Student teams receive the marked interim report back within 2-3 weeks of the submission deadline with strong feedback on what is good/poor about their suggested design.  Student teams receive peer feedback on the quality of their final systems, after completing the automated testing questionnaire, and receive feedback on their final report, in terms of a checked list of features on the coversheet.  The class receives email feedback from the lecturer covering the main points done well and less well.','Dr Anthony Simons','com6519','Cloud computing','By the end of the unit, a candidate will...understand the difference between elastic, virtualised cloud computing and other kinds of Internet-enabled distributed computing, or map-reduce grid computing;understand the architecture of the cloud stack, including the infrastructure-, platform-, and software-as-a-service levels, and be familiar with major providers of these offerings;understand the choice of database engine underlying a cloud software service, including deep storage, block storage, key-value storage and relational storage;understand the choice of technologies used to connect cloud software services, including message queueing services and publish-subscribe models;understand contracts in the cloud, including subscription and metered usage payment models, and monitoring service-level agreements for adaptation and recovery;understand the rapidly developing range of technologies involved in constructing software services, such as Java, Go, PHP, Python, Ruby, XML, JSON and SQL;understand the range of technologies involved in delivering web-based software services, such as WSDL and SOAP, REST, JSON and XML, or rich-client applications with AJAX;understand the architectural components involved in hosting a web-based software service, such as web-servers, application-servers, database servers and client machines;have collaborated in a team to design and develop a novel software service, as part of a wider software service ecosystem;have deployed their team’s software service to a cloud platform, taking issues such as security, scalability and load-balancing into account;have published their team’s software service in some internet-enabled registry and repository system, so that it is accessible by other teams;have evaluated the work of another team against the project requirements;have worked productively in a team, either as manager or delegate with responsibilities to the rest of the team.','Spring 2018/19','Cloud computing offers virtual, scalable, shared computing resources via a network, as a utility service. This module introduces the concepts of cloud computing, explaining why business is moving to this model, and teaches the technologies involved in developing a platform-as-a-service offered via the cloud. It focuses on Linux and Java servlet programming technologies for developing software service ecosystems. Students should be aware that there are limited places available on this course.','The teaching method is by lectures, supported by laboratory classes where students may engage with the various technologies under supervision before completing their group project.'),('The aim of the Darwin project is to give students at advanced undergraduate and masters level insight into the research process. The objective of the module is for students to learn how to apply scientific research methodology to a small group research project.','Coursework [100%]','The content is determined by the research projects. Students have to research the relevant literature, plan the research work, implement and experiment, write reports, papers and give presentations to experience a complete research cycle.','30','The students will receive immediate feedback during lab sessions and in presentations. Project supervisors will give detailed feedback in weekly supervision and on submitted reports.','Dr Dawn Walker','com6520','Darwin Project','By the end of the unit, a candidate will...have a very good understanding of the process of conducting research;be able to conduct a complete and concise literature review of the topic area; be able to form a research proposal and attempt to solve it based on a thorough understanding of a topic area; be able to write a journal quality scientific paper; be able to present research orally;understand the process of working within a team.','Academic Year 2018/19','The Darwin research project provides the opportunity for students to engage in a substantial piece of research work. It is undertaken in groups. Unlike the individual project, it is not primarily concerned with software development, although software development may be involved as part of the process of carrying out the research, for instance to construct the \'experimental apparatus\' required for it. Projects are suggested and supervised by Department of computer Science staff. Students form groups and choose a project which interests them (subject to numbers of students registered), then refine the scope of the research by conducting a thorough analysis of the topic area and formulating a solution also with the help of their supervisor. The project is developed under strong supervision and appropriate interim reports are produced and presented. The project culminates with the production of a publication of the research finding and a full report of the work carried out, as well a final conference style presentation.','The course begins with a number of lectures/lab sessions outlining how research projects are conducted and the resources available to students. The latter include: Linux, the Emacs text editor, LaTeX, MATLAB, scripting languages and collaborative tools (wikis, SVN, git, blogs).Group Meetings. From week 6, each group will meet the project supervisor for a full hour every week. These meetings are for the group to report to the project supervisor on progress so far, and to allow the supervisor to provide feedback on progress. These meetings should be minuted and those minutes should be available through the project wiki. Project milestones and interim deliverables will also be discussed or modified. Bi-weekly reports will be submitted at every other meeting and reviewed by the supervisor. These reports will reflect individual contributions to the main project and any particular sub-tasks an individual may have carried out.'),('To introduce modern accelerator architectures, explain the difference between data and task parallelism and raise awareness into how the practical and theoretical performance of architectures differs. To give practical knowledge of how GPU programs operate and how they can be utilised for high performance applications.To develop an understanding of the importance of benchmarking and profiling in order to recognise factors limiting performance and to address these through optimisation.','80% for project assignment of which 40% is for the delivery of course work (code) and 40% is for written report describing methods and techniquesTwo 10% multiple choice quizzes.','Introduction to accelerated computingIntroduction to programming in CPointer and MemoryOptimising C programsMulti core programming with OpenMPIntroduction to Accelerated computingIntroduction to CUDAGPU memory systemsCaching and Shared MemorySynchronisation and AtomicsParallel PrimitivesAsynchronous programmingProfiling and Optimisation of GPU programs','15','Students will receive continuous feedback from lab sessions and Google discussion groups. Feedback will also be given on marked quiz assignments and for the main assignment.','Dr Mozhgan Kabiri-Chimeh','com6521','Parallel computing with Graphical Processing Units (GPUs)','By the end of this course students will be able to: Understand how to write C programs and manage memory allocation manually.Utilise OpenMP to write programs for multi core architectures to improve code performance.Be able to describe and discuss performance techniques for multi core processors.Program GPUs for general purpose use with the CUDA language.Appreciate how GPU program performance can be improved through intelligent caching.Appreciate the scope, potential and limitations of accelerators for improving code performance.Benchmark and profile GPU programs.Identify limiting factors to code performance and address these through architecture specific optimisation techniques.Recognise and understand the importance of parallel primitives (such as scan and reduce) and understand how these can be implemented with data parallelism.','Spring 2018/19','Accelerator architectures are discrete processing units which supplement a base processor with the objective of providing advanced performance at lower energy cost. Performance is gained by a design which favours a high number of parallel compute cores at the expense of imposing significant software challenges. This module looks at accelerated computing from multi-core CPUs to GPU accelerators with many TFlops of theoretical performance. The module will give insight into how to write high performance code with specific emphasis on GPU programming with NVIDIA CUDA GPUs. A key aspect of the module will be understanding what the implications of program code are on the underlying hardware so that it can be optimised. Students should be aware that there are limited places available on this course.','Weekly lectures will introduce students to the background on CPU and GPU architectures and programming techniques. Lectures will highlight key design principles for parallel and GPU programming to give students the necessary insight to be able to constructively look at problems and understand the implications of parallel computing. Lab sessions will facilitate hands on learning of practical skills through targeted exercises'),('This module aims to: Prepare students for working in a team in a professional software engineering environment Raise students’ awareness, abilities and knowledge relating to the activities involved in the development of a software application Provide students with experience of developing a software application using agile software engineering practices and industrial tools','20% individual assessment (breadth of knowledge test, and reflections on performance). 80% team assessment (presentation, and a project, with peer review). This module has the explicit objective of developing teamwork skills. Participation in teamwork is mandatory and absence will result in deduction of marks and eventually loss of credits.','The precise experience of students will depend on the nature of their project, but will always involve using Ruby on Rails to develop a web application whilst exploring the following topics: Coding (pair programming, standards) Design (mockups, parallel prototyping, personas) Process (Agile, burnup charts, continuous delivery, Kanban, planning, retrospectives) Quality (error handling, security) Requirements (acceptance criteria, estimation, prioritisation, proposals, story mapping, user stories, value statements) Testing (automated testing, manual testing)','15','Students will meet weekly as a team with their mentor to discuss their progress and plans. The mentor will offer feedback and guidance, and encourage the students to be proactive in developing their knowledge and skills in appropriate areas. Students will be required to provide draft submissions for elements of their team project throughout the semester so that mentors are able to review these. Students will hold regular retrospectives as a team where they will review their own practices and identify opportunities for improvement. Mentors will facilitate and/or observe these retrospectives as needed to ensure they are effective, and offer feedback and guidance to students on their facilitation of and participation in retrospectives.At the end of the breadth of knowledge test a score will be provided in the online learning environment. Following this, explanatory comments will be emailed for the questions that are most frequently answered incorrectly by the cohort. Following the end of the semester, students will be emailed both team and individual marks and feedback sheets. These will include marks and explanatory comments for appropriate activities as described in the module mark scheme. Much of the feedback and guidance provided will relate to the performance of the team (which accounts for 80% of the assessment) rather than the individual. However, individual feedback and guidance will also be provided where issues are highlighted in peer reviews or where mentors have specific observations.','Chris Murray (module co-ordinator), Ryan Bibby, Chrissie Elliott, James Gregory, Harriet Holman, Dr Phil McMinn, Lauren O\'Hara, Andrew Stratton','com6534','Introduction to Genesys','By the end of the module, students will be able to: Explain some of the organisational and technical issues that underlie the development of a software application Apply agile software engineering practices, and make use of industrial tools, during the development of a software application Identify valuable requirements by having conversations with, and gaining feedback from, project stakeholders Facilitate the prioritisation of requirements by collecting and interpreting appropriate data Build and release secure and robust web applications using Ruby on Rails Critically reflect on performance as an individual, and as a team Create a successful software application as part of a team','Autumn 2018/19','This module is an introduction to the processes involved in working with real customers and solving genuine problems, using agile software engineering practices. Students work in teams to develop web applications as training to become part of Genesys (com6535), supported by staff from epiGenesys .','During the semester students will work in teams to create and release a web application. In the first 7 weeks of the semester training will be provided, in a flipped classroom style. Students will study material in the online enviornment and attend training sessions, whilst also working on their project. For the remainder of the semester students will continue to work on their project. Students are expected to be pro-active in developing their knowledge and skills, using the training as a foundation and seeking guidance from their mentor as needed.'),('This module aims to: Give students experience of working in a team in a professional software engineering environment Raise students’ awareness, abilities and knowledge relating to the activities involved in the development of a software application Provide students with experience of developing a software application for real customers using agile software engineering practices and industrial tools','20% individual assessment (breadth of knowledge test, and reflections on performance). 80% team assessment (presentation, and a project, with peer review).This module has the explicit objective of developing teamwork skills. Participation in teamwork is mandatory and absence will result in deduction of marks and eventually loss of credits.','The precise experience of students will depend on the nature of their customers/project, but will always involve using Ruby on Rails to develop a web application whilst exploring the following topics: Coding (architecture, pair programming, refactoring, standards) Design (mockups, parallel prototyping, personas) Process (Agile, burnup charts, continuous delivery, Kanban, planning, process improvement, retrospectives, risk management, Scrum) Quality (accessibility, error handling, performance, reliability, security, user experience)Requirements (acceptance criteria, estimation, prioritisation, proposals, story mapping, user stories, value statements) Testing (automated testing, manual testing, test driven development)','30','Students will meet weekly as a team with their mentor to discuss their progress and plans. The mentor will offer feedback and guidance, and encourage the students to be proactive in developing their knowledge and skills in appropriate areas. Students will be required to provide draft submissions for elements of their team project throughout the semester so that mentors are able to review these. Students will hold regular retrospectives as a team where they will review their own practices and identify opportunities for improvement. Mentors will facilitate and/or observe these retrospectives as needed to ensure they are effective, and offer feedback and guidance to students on their facilitation of and participation in retrospectives. At the end of the breadth of knowledge test a score will be provided in the online learning environment. Following this, explanatory comments will be emailed for the questions that are most frequently answered incorrectly by the cohort. Following the end of the semester, students will be emailed both team and individual marks and feedback sheets. These will include marks and explanatory comments for appropriate activities as described in the module mark scheme. Much of the feedback and guidance provided will relate to the performance of the team (which accounts for 80% of the assessment) rather than the individual. However, individual feedback and guidance will also be provided where issues are highlighted in peer reviews or where mentors have specific observations.','Harriet Holman (module co-ordinator), Ryan Bibby, Chrissie Elliott, James Gregory, Dr Phil McMinn, Chris Murray and Andrew Stratton','com6535','Genesys','By the end of the module, students will be able to: Explain the organisational and technical issues that underlie the development of a software application Apply agile software engineering practices, and make use of industrial tools, during the development of a software application Identify valuable requirements by having conversations with, and gaining feedback from, customers and stakeholders Design usable web applications that demonstrate an awareness of user needs Facilitate the prioritisation of requirements by collecting and interpreting appropriate data Build and release maintainable, secure and robust web applications using Ruby on Rails Critically reflect on performance as an individual, and as a team, and adapt behaviours and process appropriately compare and appraise a range of software development practices and methodologies in the context of the Agile Manifesto Create a successful software application as part of a team','Spring 2018/19','This module involves students working with real customers and solving genuine problems, using agile software engineering practices. Students work in teams to develop web applications as part of Genesys, supported by staff from epiGenesys. Students should be aware that there are limited places available on this course.','During the semester students will work in teams to create and release a web application which provides value to real customers. In the first 7 weeks of the semester training will be provided in a flipped classroom style. Students will study material in the online learning environment and attend training sessions, whilst also working on their team project. For the remainder of the semester students will continue to work on their project. Students are expected to be proactive in developing their knowledge and skills, using their experience from com6534 and the training as a foundation and seeking guidance from their mentor as needed.'),('to develop an understanding of the relationship between computing, technological change, society and the law; to emphasise the powerful role that computers and computer professionals play in a technological society; to provide an understanding of legal areas which are relevant to the discipline of computing; to provide an understanding of ethical concepts that are important to a computer professional; to give experience in the consideration of ethical matters and solving ethical dilemmas.','100% assignment: 30% written assignment and 70% take away paper covering all aspects of the course material on a strict deadline','Introduction to Legal ConceptsIntellectual property, copyright and patents ContractsLiability Introduction to ethics and moral philosophyProfessional ethics for computer scientists Privacy and the freedom of informationcomputer misuse and computer crime IT and the quality, quantity and organisation of work','10','Written comments on the assignment. Verbally in class tutorial/seminar sessions.','Dr Amanda Sharkey','com6650','Professional Issues in IT','By the end of this course the students should: be able to describe the impact of technological change, particularly that due to the introduction of computer and software systems, upon society; understand the current legal framework within which computer and software systems are developed, applied and regulated; be able to assess the effect of the legal framework upon the design of, and professional liability for, computer and software systems; understand the importance of ethical considerations to any professional work involving computer or software systems; be able to reason about the application of ethical principles in the solving of ethical dilemmas relating to software systems.','Autumn 2018/19','This module aims to promote an awareness of the wider social, legal and ethical issues of computing. It describes the relationship between technological change, society and the law, emphasising the powerful role that computers and computer professionals play in a technological society. It also introduces the legal areas which are specific and relevant to the discipline of computing (eg intellectual property, liability for defective software, computer misuse, etc) and aims to provide an understanding of ethical concepts that are important to computer professionals, and experience of considering ethical dilemmas.','Teaching will be delivered by lectures. Applications of the material from the lectures to typical situations within computing will be discussed in the lectures. Emphasis will be put on directed reading and on the practical applications of the material to be researched.'),('to develop an understanding of the relationship between computing, technological change, society and the law; to emphasise the powerful role that computers and computer professionals play in a technological society; to provide an understanding of legal areas which are relevant to the discipline of computing; to provide an understanding of ethical concepts that are important to a computer professional; to give experience in the consideration of ethical matters and solving ethical dilemmas.','100% assignment: 30% 2 written assignments and 70% take away paper covering all aspects of the course material on a strict deadline.','Introduction to Legal ConceptsIntellectual property, copyright and patents ContractsLiability Introduction to ethics and moral philosophy Professional ethics for computer scientists Privacy and the freedom of informationcomputer misuse and computer crime IT and the quality, quantity and organisation of work','15','Written comments on the two assignments. Verbally in class tutorial/seminar sessions','Dr Amanda Sharkey','com6655','Professional Issues','By the end of this course the students should: be able to describe the impact of technological change, particularly that due to the introduction of computer and software systems, upon society; understand the current legal framework within which computer and software systems are developed, applied and regulated; be able to assess the effect of the legal framework upon the design of, and professional liability for, computer and software systems; understand the importance of ethical considerations to any professional work involving computer or software systems; be able to reason about the application of ethical principles in the solving of ethical dilemmas relating to software systems.','Autumn 2018/19','This module aims to promote an awareness of the wider social, legal and ethical issues of computing. It describes the relationship between technological change, society and the law, emphasising the powerful role that computers and computer professionals play in a technological society. It also introduces the legal areas which are specific and relevant to the discipline of computing (eg intellectual property, liability for defective software, computer misuse, etc) and aims to provide an understanding of ethical concepts that are important to computer professionals, and experience of considering ethical dilemmas.','Teaching will be delivered by lectures. Applications of the material from the lectures to typical situations within computing will be discussed in the lectures. Emphasis will be put on directed reading and on the practical applications of the material to be researched.'),('This unit aims to prepare students effectively for the Dissertation Project, including familiarisation with:Background literature in their chosen project area The peer-review process;Risk management and contingency planning, including the evaluation of scientific risk;Professional, legal and ethical frameworks.','PEER-REVIEW ACTIVITY (20%):Students will be assessed on their performance in a peer-review activity, e.g. writing a well-reasoned review of a previous year\'s dissertation.PROJECT BACKGROUND REPORT (80%): This will assess the students\' specific knowledge of their project topic, as evidenced by a detailed and concise review of current literature and/or industrial practice in the field. In particular, the project background report will be required to contain material addressing the following, which are mandatory components of the assessment: Risk analysis (including scientific risk and commercial risk) and contingency planning for the management of risk;The professional, legal and ethical framework in which their work will be carried out;','Lectures (6 hours) will cover the basic skills and knowledge required to conduct the dissertation project to a professional standard: Scientific method and writing (1 hour) communication and presentation skills (1 hour) Ethical and professional issues (1 hour) Risk management (1 hour) Intellectual property law (1 hour) Contract law (1 hour)','15','Written feedback will be given on the peer-review activity and project background report. Lecture classes will include discussion sessions, in which students will receive feedback on their responses to case study problems.','Dr. Paul Watton','com6905','Research Methods and Professional Issues','By the end of the unit, a candidate will be able to demonstrate the ability to:Write a review of relevant background material which is concise, well-structured, up-to-date and critical;Establish a feasible plan for the Dissertation Project;Assess material as part of the peer-review process;Analyse risk (including scientific risk and commercial risk), and formulate viable contingency plans for the management of risk;Work within, and appreciate the implications of working within, appropriate professional, legal and ethical frameworks.','Spring 2018/19','This module aims to provide a solid foundation for the Dissertation Project (com6906). Students receive instruction both through taught lectures, and from their project tutors on an individual weekly basis, including: advice on research methods and technical writing style; risk analysis and contingency planning; peer-review processes; and the details of working within a professional, legal and ethical framework. The module is assessed on the basis of a project background report, which is submitted at the end of the spring semester, and on additional peer-review activities.','One lecture per week for six weeks. Weekly individual meetings with the project supervisor.'),('This unit aims to give the student the opportunity:to demonstrate research skills by integrating material learnt throughout the MSc course with new material learnt during the project and applying this to a substantial open-ended problem of relevance to their specialismto undertake an individual piece of work in an area of their own choice;to demonstrate and improve their technical abilities in the areas relevant to the project;to demonstrate and improve their professional skills, particularly those of time and work management, understanding of relevant social, legal and ethical issues, and risk assessment and management;to demonstrate their skills in imparting technical information both orally and in writing.','Assessment of the module is by a dissertation that is produced towards the end of the second semester, complemented by a presentation session where the work done is to be demonstrated and questions answered. If considered appropriate by the examiners an oral examination may be held.','The content of the project is typically selected by the student from a range of topics proposed by the staff or industrial partners of the department. Students are also encouraged to propose their own topic, provided they can find a supervisor willing to supervise it and with the agreement of the Projects Officer.','60','Regular meetings with their supervisor.','A project supervisor will be allocated during week 11 of the Autumn semester.','com6906','Dissertation Project','By the end of the unit, a candidate will be able to demonstrate:the ability to apply computer science and/or software engineering principles to produce a solution to an open-ended problem;an in-depth knowledge of the state-of-the-art in the project area;practical skills appropriate to the project area;an ability to plan and manage their time effectively, whilst giving due consideration to, and reflection on, risk management and relevant social, legal and ethical issues;an ability to document the work that they have done, review it critically, and present it to others.','Spring 2018/19','This is a research led project that is supervised by a member of staff. In order to ensure best use of the summer study period, project preparation and planning is carried out in semester 2, which is separately assessed. Project activities take place during the summer period using Departmental facilities and students are exposed to the latest methods and ideas in the area of their project. There is scope for students to demonstrate their critical skills and topic-related knowledge to a high level.','Students use departmental facilities and are exposed to the state-of-the-art methods and equipment relevant to the project topic. Students are expected to progress their project according to their previously developed plan. The progress made is reviewed at regular meetings with their supervisor(s).'),('to integrate the material learnt throughout the MSc course, by applying it to a substantial open-ended problem; to give the student the opportunity of undertaking an individual piece of work in an area of their own choice; to give the student the opportunity to demonstrate and improve their technical abilities in the areas relevant to the project; and to give the student the opportunity to demonstrate and improve their personal skills, particularly those of time and work management, report writing and general presentation.','Assessment of the module is by a dissertation that is produced towards the end of the second semester, complemented by a presentation session where the work done is to be demonstrated and questions answered. If considered appropriate by the examiners an oral examination may be held.','The content of the project is typically selected by the student from a range of topics proposed by the staff or industrial partners of the department. Students are also encouraged to propose their own topic, provided they can find a supervisor willing to supervise it and with the agreement of the Projects Officer.','60','Regular meetings with their supervisor.','A project supervisor will be allocated during week 11 of the Autumn semester.','com6910','Dissertation Project','By the end of this course the students should: have demonstrated that they can research the background to an open-ended problem; have demonstrated that they can plan and manage the process of producing a solution to that problem; have demonstrated that they can carry out the major part of that solution process; and have demonstrated that they can document the work that they have done, review it critically, and present it to others.','Spring 2018/19','For their individual project, students can choose from a wide range of possibilities in many different environments both within and outside the University. The project is completed during the summer, and each student will have a personal academic supervisor to guide them during this period. The individual project is examined by a dissertation based on the project work and an oral examination.','The student is expected to meet regularly with the supervisor for 30-60 mins, in order to discuss progress with the work and obtain advice on it. The rest of the work they are expected to plan and carry out independently.'),('The aim of the Industrial Team project is to give students at masters level insight into the research process on industrial inspired problems. The objective of the module is for students to learn how to apply scientific research methodology to a small group research project.','Coursework [100%]','The content is determined by the research projects. Students have to research the relevant literature, plan the research work, present their plan, implement and experiment, and write reports.','15','The students will receive immediate feedback during lab sessions and in presentations. Project supervisors will give detailed feedback in supervisory meetings and on submitted reports.','Prof. Thomas Hain','com6911','Industrial Team Project','By the end of this course the students should: have a very good understanding of the process of conducting research;be able to conduct a complete and concise literature review of the topic area;be able to form a research proposal and attempt to solve it based on a thorough understanding of a topic area;be able to present a research plan orally;understand the process of working within a team','Academic Year 2018/19','The Industrial Team project provides the opportunity for students to engage in industry inspired research work. It is undertaken in groups.  Projects are suggested by industrial problems and supervised by Department of computer Science staff or industry experts. Students form groups and choose a project which interests them, then refine the scope of the research by conducting a thorough analysis of the topic area and formulating a solution also with the help of their supervisor. The project is developed under strong supervision. The students present their project overview within the first few weeks of the semester and submit a report on the work at the end of semester.','The course begins with a number of lectures/lab sessions outlining how research projects are conducted and the resources available to students. Soon after the project allocations each group meets frequently with their project supervisor to report on progress so far, and to allow the supervisor to provide feedback on progress.'),('to integrate the material learnt throughout the MSc course, by applying it to a substantial open-ended problem; to give the student the opportunity of undertaking an individual piece of work in an area of their own choice; to give the student the opportunity to demonstrate and improve their technical abilities in the areas relevant to the project; and to give the student the opportunity to demonstrate and improve their personal skills, particularly those of time and work management, report writing and general presentation.','Assessment of the module is by a dissertation that is produced towards the end of the second semester, complemented by a presentation session where the work done is to be demonstrated and questions answered. If considered appropriate by the examiners an oral examination may be held.','The content of the project is typically selected by the student from a range of topics proposed by the staff or industrial partners of the department. Students are also encouraged to propose their own topic, provided they can find a supervisor willing to supervise it and with the agreement of the Projects Officer.','60','Regular meetings with their supervisor.','A project supervisor will be allocated during week 11 of the Autumn semester.','com6912','Data Analytics Dissertation Project','By the end of this course the students should: have demonstrated that they can research the background to an open-ended problem; have demonstrated that they can plan and manage the process of producing a solution to that problem; have demonstrated that they can carry out the major part of that solution process; and have demonstrated that they can document the work that they have done, review it critically, and present it to others.','Acad Yr 2018/19','For their individual project, students can choose from a wide range of possibilities in many different environments both within and outside the University. The project is completed during the summer, and each student will have a personal academic supervisor to guide them during this period. The individual project is examined by a dissertation based on the project work and an oral examination.','The student is expected to meet regularly with the supervisor for 30-60 mins, in order to discuss progress with the work and obtain advice on it. The rest of the work they are expected to plan and carry out independently.');
/*!40000 ALTER TABLE `Modules` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-03-06 13:50:00
